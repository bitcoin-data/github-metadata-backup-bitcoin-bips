{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1800",
    "id": 2420072801,
    "node_id": "PR_kwDOAN28mc6QP2Fh",
    "html_url": "https://github.com/bitcoin/bips/pull/1800",
    "diff_url": "https://github.com/bitcoin/bips/pull/1800.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1800.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1800/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
    "number": 1800,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP 54: Consensus Cleanup",
    "user": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This is a BIP draft for a Consensus Cleanup soft fork.\r\n\r\nThis proposal builds upon Matt Corallo's 2019 [proposal](https://github.com/TheBlueMatt/bips/blob/7f9670b643b7c943a0cc6d2197d3eabe661050c2/bip-XXXX.mediawiki), which i set to revive at the end of 2023. I eventually shared my research in a [Delving Bitcoin post](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710) in early 2024 (along with a [semi-private companion post](https://delvingbitcoin.org/t/worst-block-validation-time-inquiry/711) for the redacted sensitive details). A number of people contributed ideas, testing and otherwise fruitful discussion. This led to settling on a list of mitigations, which [i updated the mailing list about](https://gnusha.org/pi/bitcoindev/jiyMlvTX8BnG71f75SqChQZxyhZDQ65kldcugeIDJVJsvK4hadCO3GT46xFc7_cUlWdmOCG0B_WIz0HAO5ZugqYTuX5qxnNLRBn3MopuATI=@protonmail.com) in February 2025.\r\n\r\nI think it's now ready to be officially published as a BIP.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-03-26T17:22:35Z",
    "updated_at": "2025-04-18T07:24:43Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "7c6be826adc0a8c5d6ef16e81a37b047affa6095",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "darosior:consensus_cleanup",
      "ref": "consensus_cleanup",
      "sha": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 208778505,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMDg3Nzg1MDU=",
        "name": "bips",
        "full_name": "darosior/bips",
        "owner": {
          "login": "darosior",
          "id": 22457751,
          "node_id": "MDQ6VXNlcjIyNDU3NzUx",
          "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/darosior",
          "html_url": "https://github.com/darosior",
          "followers_url": "https://api.github.com/users/darosior/followers",
          "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
          "organizations_url": "https://api.github.com/users/darosior/orgs",
          "repos_url": "https://api.github.com/users/darosior/repos",
          "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/darosior/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/darosior/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/darosior/bips",
        "archive_url": "https://api.github.com/repos/darosior/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/darosior/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/darosior/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/darosior/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/darosior/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/darosior/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/darosior/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/darosior/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/darosior/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/darosior/bips/contributors",
        "deployments_url": "https://api.github.com/repos/darosior/bips/deployments",
        "downloads_url": "https://api.github.com/repos/darosior/bips/downloads",
        "events_url": "https://api.github.com/repos/darosior/bips/events",
        "forks_url": "https://api.github.com/repos/darosior/bips/forks",
        "git_commits_url": "https://api.github.com/repos/darosior/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/darosior/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/darosior/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/darosior/bips.git",
        "issue_comment_url": "https://api.github.com/repos/darosior/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/darosior/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/darosior/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/darosior/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/darosior/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/darosior/bips/languages",
        "merges_url": "https://api.github.com/repos/darosior/bips/merges",
        "milestones_url": "https://api.github.com/repos/darosior/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/darosior/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/darosior/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/darosior/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:darosior/bips.git",
        "stargazers_url": "https://api.github.com/repos/darosior/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/darosior/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/darosior/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/darosior/bips/subscription",
        "tags_url": "https://api.github.com/repos/darosior/bips/tags",
        "teams_url": "https://api.github.com/repos/darosior/bips/teams",
        "trees_url": "https://api.github.com/repos/darosior/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/darosior/bips.git",
        "hooks_url": "https://api.github.com/repos/darosior/bips/hooks",
        "svn_url": "https://github.com/darosior/bips",
        "homepage": "bitcoin.org",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 15455,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-17T20:45:15Z",
        "created_at": "2019-09-16T11:02:25Z",
        "updated_at": "2025-03-27T12:51:10Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6ceafc51b17665f7cb13c8e2b9ee6354b9d374bd",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5563,
        "stargazers_count": 9867,
        "watchers_count": 9867,
        "size": 15552,
        "default_branch": "master",
        "open_issues_count": 35,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-04-16T14:10:16Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-04-18T05:29:22Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 234,
    "deletions": 0,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 122,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 16998146212,
      "node_id": "LE_lADOAN28mc6v2lm4zwAAAAP1KyCk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16998146212",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-26T18:28:29Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2718524343,
      "node_id": "PRR_kwDOAN28mc6iCWO3",
      "url": null,
      "actor": null,
      "commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "First pass of review, mostly copy editing suggestions so far.",
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2718524343",
      "submitted_at": "2025-03-26T20:19:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "reviewed",
      "id": 2718634239,
      "node_id": "PRR_kwDOAN28mc6iCxD_",
      "url": null,
      "actor": null,
      "commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2718634239",
      "submitted_at": "2025-03-26T21:13:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "reviewed",
      "id": 2720496281,
      "node_id": "PRR_kwDOAN28mc6iJ3qZ",
      "url": null,
      "actor": null,
      "commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK on the timewarp and Murch-Zawy fix, as well as the 64 byte transaction ban. \r\n\r\nI still need to think about the worst case validation fix more, though the approach seems reasonable.\r\n\r\nWith respect to the `nLockTime` change, I need to get a sense of what pool software should take into account, especially since Bitoin Core does not construct the coinbase transaction.\r\n\r\nWe don't strictly need this change until height 1,983,702, but it seems better to enforce it at the same time as the rest of these changes. Otherwise we might end up with accidental forks several decades from now with nobody remembering this BIP.\r\n\r\nI also still need to see and study the implementation(s), outside the timewarp fix, which I'm fairly familiar with by now.",
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2720496281",
      "submitted_at": "2025-03-27T10:22:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "reviewed",
      "id": 2722326718,
      "node_id": "PRR_kwDOAN28mc6iQ2i-",
      "url": null,
      "actor": null,
      "commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2722326718",
      "submitted_at": "2025-03-27T16:06:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "commented",
      "id": 2762689033,
      "node_id": "IC_kwDOAN28mc6kq0oJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2762689033",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-28T22:07:33Z",
      "updated_at": "2025-03-28T22:07:33Z",
      "author_association": "NONE",
      "body": "There might be a problem with the math in this BIP.\r\n\r\nExposing said problem clearly might be a $5k a day wreck the whole LN style of exploit.\r\n\r\nAsking for a friend who is curious on how to handle said problem.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2762689033",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "commented",
      "id": 2764641645,
      "node_id": "IC_kwDOAN28mc6kyRVt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2764641645",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T16:43:44Z",
      "updated_at": "2025-03-30T16:43:44Z",
      "author_association": "MEMBER",
      "body": "@ariard i made sure you are on the private thread, if you want to discuss potentially sensitive details please do so there. Alternatively feel free to contact me privately.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2764641645",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "mentioned",
      "id": 17048410828,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAP4KhrM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17048410828",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T16:43:45Z"
    },
    {
      "event": "subscribed",
      "id": 17048410831,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAP4KhrP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17048410831",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-30T16:43:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17064123503,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP5Gdxv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17064123503",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "34ea72c72a40b90611663fc3fe0e62177923773d",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/34ea72c72a40b90611663fc3fe0e62177923773d",
      "created_at": "2025-03-31T21:19:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17078776063,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP5-XD_",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17078776063",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "e3a557f1c78b4269ebc8da71af2e31d76761b279",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/e3a557f1c78b4269ebc8da71af2e31d76761b279",
      "created_at": "2025-04-01T16:37:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17080647808,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP6FgCA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17080647808",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "404010f176ec5e90c8e634c685498c12a01ec921",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/404010f176ec5e90c8e634c685498c12a01ec921",
      "created_at": "2025-04-01T18:32:26Z"
    },
    {
      "event": "reviewed",
      "id": 2733748853,
      "node_id": "PRR_kwDOAN28mc6i8bJ1",
      "url": null,
      "actor": null,
      "commit_id": "404010f176ec5e90c8e634c685498c12a01ec921",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Just a quick first look and some editorial comments as I see that this is still being edited and already getting quite a bit of feedback.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2733748853",
      "submitted_at": "2025-04-01T18:49:24Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17081668064,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP6JZHg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17081668064",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "8d16f01d3adbbcc8f9f533c5bc6e5329a5e0ab20",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/8d16f01d3adbbcc8f9f533c5bc6e5329a5e0ab20",
      "created_at": "2025-04-01T19:45:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17081697620,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP6JgVU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17081697620",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "625937ef025070ead526eecad52baa54039fe99b",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/625937ef025070ead526eecad52baa54039fe99b",
      "created_at": "2025-04-01T19:48:12Z"
    },
    {
      "event": "commented",
      "id": 2770527506,
      "node_id": "IC_kwDOAN28mc6lIuUS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2770527506",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-01T19:50:12Z",
      "updated_at": "2025-04-01T19:50:12Z",
      "author_association": "MEMBER",
      "body": "Thanks everyone for the review thus far. I think i've addressed everything.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2770527506",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17101042553,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP7TTN5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17101042553",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "created_at": "2025-04-02T21:04:44Z"
    },
    {
      "event": "reviewed",
      "id": 2743285135,
      "node_id": "PRR_kwDOAN28mc6jgzWP",
      "url": null,
      "actor": null,
      "commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This proposal looks mostly complete from an editorial standpoint. In a few segments, the style could be even more prosaic—the document could be a bit clearer by avoiding passive voice and directly referencing subjects and objects of sentences than referencing via noun phrases and pronouns. Some abstract ideas are referenced with different terms. It would be preferable if the same term is used for the same concept throughout.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2743285135",
      "submitted_at": "2025-04-04T15:40:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "reviewed",
      "id": 2744126549,
      "node_id": "PRR_kwDOAN28mc6jkAxV",
      "url": null,
      "actor": null,
      "commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#pullrequestreview-2744126549",
      "submitted_at": "2025-04-04T21:20:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17155941705,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAP-kuVJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17155941705",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "797984c3543609fdddd01b8a62e12346ed5f1b19",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/797984c3543609fdddd01b8a62e12346ed5f1b19",
      "created_at": "2025-04-07T15:24:30Z"
    },
    {
      "event": "commented",
      "id": 2784299171,
      "node_id": "IC_kwDOAN28mc6l9Qij",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2784299171",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T19:07:58Z",
      "updated_at": "2025-04-07T19:07:58Z",
      "author_association": "NONE",
      "body": "> @ariard i made sure you are on the private thread, if you want to discuss potentially sensitive details please do so there. Alternatively feel free to contact me privately.\r\n\r\nThe friend said the potential problem is _not_ related on the timewarp fix.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2784299171",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "mentioned",
      "id": 17159008897,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAP-wbKB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17159008897",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T19:07:59Z"
    },
    {
      "event": "subscribed",
      "id": 17159008921,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAP-wbKZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17159008921",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-07T19:07:59Z"
    },
    {
      "event": "commented",
      "id": 2797915905,
      "node_id": "IC_kwDOAN28mc6mxM8B",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2797915905",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T20:05:10Z",
      "updated_at": "2025-04-11T20:05:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > @ariard i made sure you are on the private thread, if you want to discuss potentially sensitive details please do so there. Alternatively feel free to contact me privately.\r\n> \r\n> The friend said the potential problem is _not_ related on the timewarp fix.\r\n\r\nHi @ariard, if you don’t intend to contribute constructively, could you please refrain from posting in this repository?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2797915905",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "mentioned",
      "id": 17229970317,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAQC_HuN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17229970317",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T20:05:11Z"
    },
    {
      "event": "subscribed",
      "id": 17229970342,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAQC_Hum",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17229970342",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-11T20:05:11Z"
    },
    {
      "event": "commented",
      "id": 2798432096,
      "node_id": "IC_kwDOAN28mc6mzK9g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2798432096",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-12T03:40:15Z",
      "updated_at": "2025-04-12T03:40:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Let’s call this BIP 54. Please update the table entry preamble and title correspondingly.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2798432096",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "renamed",
      "id": 17233111126,
      "node_id": "RTE_lADOAN28mc6v2lm4zwAAAAQDLGhW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17233111126",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-12T03:43:37Z",
      "rename": {
        "from": "Consensus Cleanup BIP draft",
        "to": "BIP 54: Consensus Cleanup"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17254942144,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAQEeYXA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254942144",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b658d46eb2052703e6217c2ae22063edc3f0a94a",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/b658d46eb2052703e6217c2ae22063edc3f0a94a",
      "created_at": "2025-04-14T19:47:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17254969749,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAQEefGV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254969749",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b3660bae4ecc1f7e380bd6077324139af5026b6f",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/b3660bae4ecc1f7e380bd6077324139af5026b6f",
      "created_at": "2025-04-14T19:49:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17254978839,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAQEehUX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254978839",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f190b56e8718078c5c39f60427fc4587eb7528a2",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/f190b56e8718078c5c39f60427fc4587eb7528a2",
      "created_at": "2025-04-14T19:50:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17254991256,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAQEekWY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254991256",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "2e33c1aee739be00540d390778a2e8507a1f60e3",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/2e33c1aee739be00540d390778a2e8507a1f60e3",
      "created_at": "2025-04-14T19:51:50Z"
    },
    {
      "event": "commented",
      "id": 2802835848,
      "node_id": "IC_kwDOAN28mc6nD-GI",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2802835848",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:52:16Z",
      "updated_at": "2025-04-14T19:52:16Z",
      "author_association": "MEMBER",
      "body": "Updated to BIP54.",
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2802835848",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI0ZjA3MDdjZDYzOWQ2ZWMyOGIwZjllMWE0MDdkYWFlOGFjOGZkZGE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "tree": {
        "sha": "63bead14516390e92b34c6bead0bbc7cfc5802ea",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/63bead14516390e92b34c6bead0bbc7cfc5802ea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8a75e437c502f08cfc3d0b9ea1faf9391309f275",
          "sha": "8a75e437c502f08cfc3d0b9ea1faf9391309f275",
          "html_url": "https://github.com/bitcoin/bips/commit/8a75e437c502f08cfc3d0b9ea1faf9391309f275"
        }
      ],
      "message": "Consensus Cleanup BIP draft",
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-04-17T20:41:08Z"
      },
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2025-03-03T21:29:40Z"
      },
      "sha": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17311651335,
      "node_id": "HRFPE_lADOAN28mc6v2lm4zwAAAAQH2tYH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17311651335",
      "actor": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "commit_url": "https://api.github.com/repos/darosior/bips/commits/24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "created_at": "2025-04-17T20:45:17Z"
    },
    {
      "event": "commented",
      "id": 2814263402,
      "node_id": "IC_kwDOAN28mc6nvkBq",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2814263402",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:46Z",
      "updated_at": "2025-04-18T00:40:46Z",
      "author_association": "NONE",
      "body": "> Hi @ariard, if you don’t intend to contribute constructively, could you please refrain from posting in this repository?\r\n\r\n@murchandamus And you could please ask to your f*cking boss @morcos to present me public excuses to have instructed one of his attorney in March 2023 in forwarding a completely defaming legal letter, of which the crux was about a bitcoin open-source matters?\r\n\r\nThe attorney was very polite and courteous. However as I said so at the time [in my email on the mailing list](https://diyhpl.us/~bryan/irc/bitcoin/bitcoin-dev/linuxfoundation-pipermail/lightning-dev/2023-March/003887.txt), I don’t think he was very competent in the field he was having a say: \"_Second, the lawyer issuing the letter sounds to be one specialist in labor law, not really cryptocurrencies and FOSS software_”.\r\n\r\nThat the integrality of the Bitcoin community minus myself is trusting Chaincode or any their affiliates for consensus changes, that’s their choice not mine. I’m saying this in all civility.\r\n\r\n- - - - - - - - - - - - - - - -\r\n\r\nMore seriously, as the friend said it’s not related to timewarp fix, and I’ve already spend time reviewing the [timewarp fixes](https://groups.google.com/g/bitcoindev/c/tKETFYnEtng) and I’ll personally review more what is related in this BIP to the timewarp fixed.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2814263402",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "mentioned",
      "id": 17313235478,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAQH8wIW",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235478",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "subscribed",
      "id": 17313235485,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAQH8wId",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235485",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "mentioned",
      "id": 17313235495,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAQH8wIn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235495",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "subscribed",
      "id": 17313235502,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAQH8wIu",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235502",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "mentioned",
      "id": 17313235513,
      "node_id": "MEE_lADOAN28mc6v2lm4zwAAAAQH8wI5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235513",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "subscribed",
      "id": 17313235523,
      "node_id": "SE_lADOAN28mc6v2lm4zwAAAAQH8wJD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17313235523",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:40:48Z"
    },
    {
      "event": "commented",
      "id": 2814266787,
      "node_id": "IC_kwDOAN28mc6nvk2j",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2814266787",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:45:13Z",
      "updated_at": "2025-04-18T00:45:13Z",
      "author_association": "NONE",
      "body": "> Let’s call this BIP 54. Please update the table entry preamble and title correspondingly.\r\n\r\nThis doesn’t say what is the BIP editorial policy followed here in matter of distributing multiple consensus changes in different BIPs as we have here 4 proposed fixes gathered in a single document (timewarp, worst-case-block, disallow 64-byte, avoid duplicate txn). Other people in the community [on the mailing list](https://groups.google.com/g/bitcoindev/c/0tSvml90Qcw/m/iQq2fk9OBgAJ), not me, have also questioned to have it spread in multiple documents.\r\n\r\nI’m not saying that the champion of the BIP and the one proposing it are on the same payroll, or used to be on the same period. Though you see there are reasons we have different BIP editors appointed.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2814266787",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    },
    {
      "event": "commented",
      "id": 2814276504,
      "node_id": "IC_kwDOAN28mc6nvnOY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2814276504",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-18T00:58:01Z",
      "updated_at": "2025-04-18T00:58:01Z",
      "author_association": "NONE",
      "body": "_And the HTML of this github pull request is stamped in the bitcoin blockchain, that way if a BIP editor doesn’t like that the truth is being said, any “moderation” action tampering with my posts could be a posteriori proved_\r\n\r\n_This is also encouraging everyone to stay polite and courteous._",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1800#issuecomment-2814276504",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1800"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938858",
      "pull_request_review_id": 2718524343,
      "id": 2014938858,
      "node_id": "PRRC_kwDOAN28mc54GYbq",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 14,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(applies to the other headings as well)\r\n```suggestion\r\n## Abstract\r\n```",
      "created_at": "2025-03-26T20:17:01Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014938858",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938905",
      "pull_request_review_id": 2718524343,
      "id": 2014938905,
      "node_id": "PRRC_kwDOAN28mc54GYcZ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 18,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The abstract should usually start with \"This BIP/document proposes/introduces...\", something like:\r\n```suggestion\r\nThis document proposes changes to consensus rules in order to fix the timewarp attack, reduce the worst case block\r\nvalidation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\r\n[bip-0030][BIP30] validation.\r\n```",
      "created_at": "2025-03-26T20:17:04Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014938905",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938905"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 16,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938968",
      "pull_request_review_id": 2718524343,
      "id": 2014938968,
      "node_id": "PRRC_kwDOAN28mc54GYdY",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 22,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\r\n```",
      "created_at": "2025-03-26T20:17:06Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014938968",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014938968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939010",
      "pull_request_review_id": 2718524343,
      "id": 2014939010,
      "node_id": "PRRC_kwDOAN28mc54GYeC",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 23,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nprotocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\r\n```",
      "created_at": "2025-03-26T20:17:08Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939061",
      "pull_request_review_id": 2718524343,
      "id": 2014939061,
      "node_id": "PRRC_kwDOAN28mc54GYe1",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 26,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "A bullet list might be better than paragraphs for describing the individual vulnerabilities.",
      "created_at": "2025-03-26T20:17:11Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939100",
      "pull_request_review_id": 2718524343,
      "id": 2014939100,
      "node_id": "PRRC_kwDOAN28mc54GYfc",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 37,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nminutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\r\n```",
      "created_at": "2025-03-26T20:17:13Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939100",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939100"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939153",
      "pull_request_review_id": 2718524343,
      "id": 2014939153,
      "node_id": "PRRC_kwDOAN28mc54GYgR",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 40,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This sentence needs improving, how about:\r\n```suggestion\r\nbe used by miners to attack their competition, creating perverse incentives and centralization\r\npressures and reducing network security.\r\n```",
      "created_at": "2025-03-26T20:17:15Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939153",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939208",
      "pull_request_review_id": 2718524343,
      "id": 2014939208,
      "node_id": "PRRC_kwDOAN28mc54GYhI",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 42,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIn computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\r\n```",
      "created_at": "2025-03-26T20:17:18Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939208",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939208"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939249",
      "pull_request_review_id": 2718524343,
      "id": 2014939249,
      "node_id": "PRRC_kwDOAN28mc54GYhx",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 44,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\npretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\r\n```",
      "created_at": "2025-03-26T20:17:20Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939249",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939309",
      "pull_request_review_id": 2718524343,
      "id": 2014939309,
      "node_id": "PRRC_kwDOAN28mc54GYit",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 51,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "utreexo is usually not capitalized:\r\n```suggestion\r\nperformed by utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\r\n```",
      "created_at": "2025-03-26T20:17:22Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939309",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939309"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939366",
      "pull_request_review_id": 2718524343,
      "id": 2014939366,
      "node_id": "PRRC_kwDOAN28mc54GYjm",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 53,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The \"Bitcoin\" disambiguation is definitely not needed here:\r\n```suggestion\r\nhaving to parse Script.\r\n```",
      "created_at": "2025-03-26T20:17:25Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939366",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939437",
      "pull_request_review_id": 2718524343,
      "id": 2014939437,
      "node_id": "PRRC_kwDOAN28mc54GYkt",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 59,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just like in the previous section, a bullet list might be better than paragraphs for describing the individual fixes. (see also [the original consensus cleanup draft](https://github.com/TheBlueMatt/bips/blob/cleanup-softfork/bip-XXXX.mediawiki) for formatting)",
      "created_at": "2025-03-26T20:17:27Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939437",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939587",
      "pull_request_review_id": 2718524343,
      "id": 2014939587,
      "node_id": "PRRC_kwDOAN28mc54GYnD",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 60,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not all implementation call the timestamp `nTime`, so just calling it \"timestamp\" might be preferable.",
      "created_at": "2025-03-26T20:17:32Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939656",
      "pull_request_review_id": 2718524343,
      "id": 2014939656,
      "node_id": "PRRC_kwDOAN28mc54GYoI",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This should probably be rewritten, as it first introduces one accounting method (count the number of `CHECKSIG` and `CHECKMULTISIG` and check if the count is less than or equal to 2500) and only then changes the accounting for `CHECKMULTISIG`.",
      "created_at": "2025-03-26T20:17:35Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939656",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939899",
      "pull_request_review_id": 2718524343,
      "id": 2014939899,
      "node_id": "PRRC_kwDOAN28mc54GYr7",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 83,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nthe timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\r\n```",
      "created_at": "2025-03-26T20:17:47Z",
      "updated_at": "2025-03-26T20:19:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014939899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014939899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940039",
      "pull_request_review_id": 2718524343,
      "id": 2014940039,
      "node_id": "PRRC_kwDOAN28mc54GYuH",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 86,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nfrom being lower than the previous block's, with a two-hour grace period. A [previous\r\n```",
      "created_at": "2025-03-26T20:17:53Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940095",
      "pull_request_review_id": 2718524343,
      "id": 2014940095,
      "node_id": "PRRC_kwDOAN28mc54GYu_",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 87,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nproposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\r\n```",
      "created_at": "2025-03-26T20:17:56Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940158",
      "pull_request_review_id": 2718524343,
      "id": 2014940158,
      "node_id": "PRRC_kwDOAN28mc54GYv-",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 89,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nblock rate increase under attack, a two-hour grace period is used here[^4].\r\n```",
      "created_at": "2025-03-26T20:17:59Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940158",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940265",
      "pull_request_review_id": 2718524343,
      "id": 2014940265,
      "node_id": "PRRC_kwDOAN28mc54GYxp",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 102,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIn the presence of 64-byte transactions a block header's Merkle root may be valid for different\r\n```",
      "created_at": "2025-03-26T20:18:04Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940265",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940353",
      "pull_request_review_id": 2718524343,
      "id": 2014940353,
      "node_id": "PRRC_kwDOAN28mc54GYzB",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 103,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nsets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\r\n```",
      "created_at": "2025-03-26T20:18:09Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940762",
      "pull_request_review_id": 2718524343,
      "id": 2014940762,
      "node_id": "PRRC_kwDOAN28mc54GY5a",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 104,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\ninterpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\r\n```",
      "created_at": "2025-03-26T20:18:23Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940891",
      "pull_request_review_id": 2718524343,
      "id": 2014940891,
      "node_id": "PRRC_kwDOAN28mc54GY7b",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 107,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nfor the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\r\n```",
      "created_at": "2025-03-26T20:18:28Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014940891",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014940891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941105",
      "pull_request_review_id": 2718524343,
      "id": 2014941105,
      "node_id": "PRRC_kwDOAN28mc54GY-x",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\noutput script that lets anyone spend the funds, or burns them.  They have also been non-standard for\r\n```",
      "created_at": "2025-03-26T20:18:35Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014941105",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941296",
      "pull_request_review_id": 2718524343,
      "id": 2014941296,
      "node_id": "PRRC_kwDOAN28mc54GZBw",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 111,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nbelieve it is preferable to address the root cause by invalidating 64-byte transactions. This\r\n```",
      "created_at": "2025-03-26T20:18:41Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014941296",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941385",
      "pull_request_review_id": 2718524343,
      "id": 2014941385,
      "node_id": "PRRC_kwDOAN28mc54GZDJ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 115,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nSeveral blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose\r\n```",
      "created_at": "2025-03-26T20:18:45Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014941385",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941449",
      "pull_request_review_id": 2718524343,
      "id": 2014941449,
      "node_id": "PRRC_kwDOAN28mc54GZEJ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 154,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n[^3]: The timewarp attack is described [here][SE timewarp] and the Murch–Zawy attack [here][Delving\r\n```",
      "created_at": "2025-03-26T20:18:49Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014941449",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941559",
      "pull_request_review_id": 2718524343,
      "id": 2014941559,
      "node_id": "PRRC_kwDOAN28mc54GZF3",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving\n+Murch-Zawy].\n+[^4]: A bug in testnet4 pushed blocks' timestamps in the future when exploited, revealing how some\n+broken pool software may produce blocks that don't respect a 10 minutes grace period. Some [raised\n+concerns][Sjors grace period] similarly broken software might be used on mainnet. Using a grace\n+period of 2 hours instead of 10 minutes only reduces the expected block interval time under attack\n+by ~2.2 seconds. See [this post][grace period debate summary] for more.\n+[^5]: The argument is about someone having a timelocked presigned transaction using some of those\n+features in its output script. The transaction cannot be mined before activation. Such outputs would\n+not be covered by an amnesty for old UTxOs. See for instance [here][O'Connor OP_CODESEPARATOR] and\n+[here][O'Connor sighash type] for discussions on this topic.\n+[^6]: It is important to reduce the worst case block validation time as well as the ratio of\n+validation time imposed over preparation cost. The former is to limit the damages an externally\n+motivated attacker can do. The latter is to disincentivize miners slowing down their competition by\n+mining expensive blocks. See [this thread][ML thread validation time] for more.\n+[^7]: A non-pathological transaction would have a public key per signature operation and at least\n+one signature per input. Per standardness a single P2SH input may not have more than 15 signature\n+operations. Even by using 1-of-15 `CHECKMULTISIG`s a transaction would bump against the maximum\n+standard transaction size before running into the newly introduced limit. To run against the newly\n+introduced limit but not the transaction size a transaction would need to spend P2SH inputs with a\n+redeem script similar to `CHECKSIG DROP CHECKSIG DROP ..`. This type of redeem script serves no",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 174,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nredeem script similar to `CHECKSIG DROP CHECKSIG DROP ...`. This type of redeem script serves no\r\n```",
      "created_at": "2025-03-26T20:18:53Z",
      "updated_at": "2025-03-26T20:19:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2014941559",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2014941559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2015007365",
      "pull_request_review_id": 2718634239,
      "id": 2015007365,
      "node_id": "PRRC_kwDOAN28mc54GpKF",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 61,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe reword this to make it clearer that `minus 7200`  is subtracted from the value of `nTime`, and not from `height N-1` (so that no one unfamiliar with the context could read it as  \"block at height N - 7201\").",
      "created_at": "2025-03-26T21:13:55Z",
      "updated_at": "2025-03-26T21:13:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2015007365",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2015007365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016055938",
      "pull_request_review_id": 2720496281,
      "id": 2016055938,
      "node_id": "PRRC_kwDOAN28mc54KpKC",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 26,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939061,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agreed, at least something to guide the reader when the topic changes.",
      "created_at": "2025-03-27T09:28:23Z",
      "updated_at": "2025-03-27T10:22:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016055938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016055938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016069142",
      "pull_request_review_id": 2720496281,
      "id": 2016069142,
      "node_id": "PRRC_kwDOAN28mc54KsYW",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 65,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe:\r\n\r\n> ... in validating the inputs of a transaction.\r\n\r\nAnd then explain the coinbase exception:\r\n\r\n\r\n> `[^1]:` The `scriptSig` of a coinbase input is not executed. Even if it were, its size is constrained such that the limit introduced in this BIP can't be reached.",
      "created_at": "2025-03-27T09:35:15Z",
      "updated_at": "2025-03-27T10:22:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016069142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016069142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016082978",
      "pull_request_review_id": 2720496281,
      "id": 2016082978,
      "node_id": "PRRC_kwDOAN28mc54Kvwi",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 68,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let's also explictly state that, unlike sigops accounting:\r\n1. The witness is ignored \r\n2. There is no 4x adjustment for non-segwit, because of (1)\r\n\r\nI assume you also want to include `OP_CHECKSIGVERIFY` and `OP_CHECKMULTISIGVERIFY`, even though they require actually valid signatures to keep going. ",
      "created_at": "2025-03-27T09:42:30Z",
      "updated_at": "2025-03-27T10:22:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016082978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016082978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016113103",
      "pull_request_review_id": 2720496281,
      "id": 2016113103,
      "node_id": "PRRC_kwDOAN28mc54K3HP",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> 64 bytes transactions can only contain an output Script that lets anyone spend the funds, or burns them.\r\n\r\nIt would be good to elaborate on these two specific claims.\r\n\r\nIf you can additionally demonstrate that any 64 byte transaction is (\"third party\") malleable in a way that adds or removes a byte, then that would completely alleviate any concerns about confiscatory surface.",
      "created_at": "2025-03-27T09:56:11Z",
      "updated_at": "2025-03-27T10:22:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016113103",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016113103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016143661",
      "pull_request_review_id": 2720496281,
      "id": 2016143661,
      "node_id": "PRRC_kwDOAN28mc54K-kt",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You should elaborate on the changes miners SHOULD and MUST make. Either in this section or one specifically for miners.\r\n\r\n- \"MUST\" in order to avoid accidentally producing an invalid block under the new rules\r\n- \"SHOULD\" to avoid accidentally producing an invalid block under _the current rules_, as well to ensure that they _only_ have to upgrade their node software when the fork activates.\r\n\r\nThey MUST run software that respects the `mintime` field of `getblocktemplate` (BIP 22 / 33) at the time of activation. They SHOULD do so already\r\n\r\nThey SHOULD run node software that sets `mintime` in a way that doesn't violate the timewarp rule, i.e. Bitcoin Core >= v29.\r\n\r\nThey MUST set nLockTime in their coinbase transactions once the rule takes effect. They MAY or SHOULD (?) do it earlier.\r\n\r\nThey MUST run bitcoin node software that considers 64 byte transactions non-standard (e.g. Bitcoin Core > v?).\r\n\r\nThey MUST run bitcoin node software with standardness rules that already effectively enforce the new sigop restriction.\r\n\r\nIf they mine non-standard transactions, they MUST carefully consider the risks.",
      "created_at": "2025-03-27T10:09:19Z",
      "updated_at": "2025-03-27T10:22:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016143661",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016143661"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016195474",
      "pull_request_review_id": 2720753900,
      "id": 2016195474,
      "node_id": "PRRC_kwDOAN28mc54LLOS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016113103,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@Christewart's draft BIP seems to to make the claim that this is indeed the case:\r\n\r\n> Pre-segwit 64-byte transactions that spend a nonstandard utxo that are inherently malleable.\r\n\r\nhttps://github.com/Christewart/bips/blob/2024-12-20-64bytetxs/bip-XXXX.mediawiki#pre-segwit-64-byte-transactions\r\n\r\nI don't fully understand the reasoning though.",
      "created_at": "2025-03-27T10:35:34Z",
      "updated_at": "2025-03-27T10:35:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016195474",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016195474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016248429",
      "pull_request_review_id": 2720838015,
      "id": 2016248429,
      "node_id": "PRRC_kwDOAN28mc54LYJt",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016113103,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Asked on Stack Exchange: https://bitcoin.stackexchange.com/questions/125971/can-any-consensus-valid-64-byte-transaction-be-third-party-malleated-to-change",
      "created_at": "2025-03-27T10:59:42Z",
      "updated_at": "2025-03-27T10:59:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2016248429",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2016248429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2017012556",
      "pull_request_review_id": 2722326718,
      "id": 2017012556,
      "node_id": "PRRC_kwDOAN28mc54OStM",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving\n+Murch-Zawy].\n+[^4]: A bug in testnet4 pushed blocks' timestamps in the future when exploited, revealing how some",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 156,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: FWIW, the min-difficulty blocks were definitely a feature, requested to be kept around from Testnet3 in the Testnet4 PR ([here](https://github.com/bitcoin/bitcoin/pull/29775#issuecomment-2047753470), [here](https://github.com/bitcoin/bitcoin/pull/29775#issuecomment-2067788551)) and specified in the BIP. Instead of exploited I would say \"overused\" or \"maxed out\"",
      "created_at": "2025-03-27T16:00:10Z",
      "updated_at": "2025-03-27T16:06:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2017012556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2017012556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2017023175",
      "pull_request_review_id": 2722326718,
      "id": 2017023175,
      "node_id": "PRRC_kwDOAN28mc54OVTH",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 55,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I agree with @Christewart on the ML that it would be better to have this split up into multiple BIPs. If you decide to keep it as one BIP you should probably number the new rules so they can be more easily referenced. This is something that was requested of BIP94 in #1782 as well.",
      "created_at": "2025-03-27T16:06:06Z",
      "updated_at": "2025-03-27T16:06:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2017023175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2017023175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2018813167",
      "pull_request_review_id": 2725788795,
      "id": 2018813167,
      "node_id": "PRRC_kwDOAN28mc54VKTv",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 55,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2017023175,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As i replied on the mailing list thread, i am not going to split this BIP into parts as i think it would unnecessarily increase overhead and could impede progress. I am happy to assign numbers to the rules though, if you find it makes them easier to be referenced.",
      "created_at": "2025-03-28T14:41:46Z",
      "updated_at": "2025-03-28T14:41:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2018813167",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2018813167"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021723890",
      "pull_request_review_id": 2730438451,
      "id": 2021723890,
      "node_id": "PRRC_kwDOAN28mc54gQ7y",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 14,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014938858,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is it an established guideline? I don't mind doing it, just curious where this comes from.",
      "created_at": "2025-03-31T20:29:18Z",
      "updated_at": "2025-03-31T20:29:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021723890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021723890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021729239",
      "pull_request_review_id": 2730447394,
      "id": 2021729239,
      "node_id": "PRRC_kwDOAN28mc54gSPX",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 26,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939061,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I disagree. I dislike the tendency to use lists as a replacement for properly conveying the flow in words. There is literally one section per mitigation, i don't think having bullet points instead of paragraph will make this any clearer.",
      "created_at": "2025-03-31T20:33:51Z",
      "updated_at": "2025-03-31T20:33:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021729239",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021729239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021731032",
      "pull_request_review_id": 2730450426,
      "id": 2021731032,
      "node_id": "PRRC_kwDOAN28mc54gSrY",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 40,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939153,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The comma you replace in your suggestion is there on purpose to avoid the \"and\" repetition. Taking the s/ed/ing/ in the form of \"leading to reduced security\".",
      "created_at": "2025-03-31T20:35:20Z",
      "updated_at": "2025-03-31T20:36:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021731032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021731032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 39,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021734213",
      "pull_request_review_id": 2730456274,
      "id": 2021734213,
      "node_id": "PRRC_kwDOAN28mc54gTdF",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 51,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939309,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Why? I've always seen it named with the first letter capitalized, including on their Github.",
      "created_at": "2025-03-31T20:38:17Z",
      "updated_at": "2025-03-31T20:38:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021734213",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021734213"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021734716",
      "pull_request_review_id": 2730457109,
      "id": 2021734716,
      "node_id": "PRRC_kwDOAN28mc54gTk8",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 53,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939366,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sure... :shrug: ",
      "created_at": "2025-03-31T20:38:46Z",
      "updated_at": "2025-03-31T20:38:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021734716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021734716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021736141",
      "pull_request_review_id": 2730459477,
      "id": 2021736141,
      "node_id": "PRRC_kwDOAN28mc54gT7N",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 59,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939437,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think my document is significantly better formatted than the original draft. Re bullet points see me earlier response. I'm not taking this suggestion.",
      "created_at": "2025-03-31T20:40:09Z",
      "updated_at": "2025-03-31T20:40:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021736141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021736141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021738073",
      "pull_request_review_id": 2730462454,
      "id": 2021738073,
      "node_id": "PRRC_kwDOAN28mc54gUZZ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 60,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939587,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah this was a point of contention when i was drafting this. However if i want to move away from Bitcoin Core lingo i should be consistent and apply it everywhere (nTime, nLockTime, nSequence, scriptSig, scriptPubKey, etc..). Will leave it as is for now.",
      "created_at": "2025-03-31T20:41:43Z",
      "updated_at": "2025-03-31T20:41:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021738073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021738073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021739258",
      "pull_request_review_id": 2730464372,
      "id": 2021739258,
      "node_id": "PRRC_kwDOAN28mc54gUr6",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939656,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggestions welcome, i wrote this a few times when i wrote the document. This is the clearest i could come up with. Alternatives made the sentence too heavy.",
      "created_at": "2025-03-31T20:42:45Z",
      "updated_at": "2025-03-31T20:42:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021739258",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021739258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021741318",
      "pull_request_review_id": 2730467760,
      "id": 2021741318,
      "node_id": "PRRC_kwDOAN28mc54gVMG",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 51,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939309,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I was looking mainly at https://github.com/utreexo/utreexod which uses the lowercase version, but indeed https://github.com/utreexo/biptreexo uses the capitalized one, so feel free to leave as is.",
      "created_at": "2025-03-31T20:44:41Z",
      "updated_at": "2025-03-31T20:44:41Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021741318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021741318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021743417",
      "pull_request_review_id": 2730471191,
      "id": 2021743417,
      "node_id": "PRRC_kwDOAN28mc54gVs5",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 83,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939899,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I remember hearing English had different dashes, but i didn't expect it'd come up as a Pull Request review comment one day! I'm not even sure how to produce those, and to be honest this is probably not the best use of our time.",
      "created_at": "2025-03-31T20:46:31Z",
      "updated_at": "2025-03-31T20:46:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021743417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021743417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021748652",
      "pull_request_review_id": 2730479823,
      "id": 2021748652,
      "node_id": "PRRC_kwDOAN28mc54gW-s",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014941105,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rationale?",
      "created_at": "2025-03-31T20:51:13Z",
      "updated_at": "2025-03-31T20:51:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021748652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021748652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021749847",
      "pull_request_review_id": 2730481871,
      "id": 2021749847,
      "node_id": "PRRC_kwDOAN28mc54gXRX",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 154,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014941449,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Let's discuss those in one place: https://github.com/bitcoin/bips/pull/1800#discussion_r2021743417. Closing this one.",
      "created_at": "2025-03-31T20:52:23Z",
      "updated_at": "2025-03-31T20:52:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021749847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021749847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021753308",
      "pull_request_review_id": 2730487462,
      "id": 2021753308,
      "node_id": "PRRC_kwDOAN28mc54gYHc",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 14,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014938858,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "From my experience, a first-level heading is only meant for the top of a page or document. I've never seen a Markdown/Mediawiki document with more than one first-level heading, and all other BIPs seem to follow this convention as well (in that they only have second-level headings and lower).",
      "created_at": "2025-03-31T20:55:27Z",
      "updated_at": "2025-03-31T20:55:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021753308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021753308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021760548",
      "pull_request_review_id": 2730499690,
      "id": 2021760548,
      "node_id": "PRRC_kwDOAN28mc54gZ4k",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014941105,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Script\" is the name of the scripting language, while a \"script\" is any program written in Script. See [this handy diagram](https://bitcoin.stackexchange.com/a/122808/121614) I've made, and for even more details check out [Murch's transaction terminology BIP](https://github.com/murchandamus/bips/blob/730a813124680a417f44bfe8117afbc89fd1ea6c/bip-tx-terminology.mediawiki).",
      "created_at": "2025-03-31T21:02:16Z",
      "updated_at": "2025-03-31T21:02:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021760548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021760548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021761546",
      "pull_request_review_id": 2730501248,
      "id": 2021761546,
      "node_id": "PRRC_kwDOAN28mc54gaIK",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving\n+Murch-Zawy].\n+[^4]: A bug in testnet4 pushed blocks' timestamps in the future when exploited, revealing how some\n+broken pool software may produce blocks that don't respect a 10 minutes grace period. Some [raised\n+concerns][Sjors grace period] similarly broken software might be used on mainnet. Using a grace\n+period of 2 hours instead of 10 minutes only reduces the expected block interval time under attack\n+by ~2.2 seconds. See [this post][grace period debate summary] for more.\n+[^5]: The argument is about someone having a timelocked presigned transaction using some of those\n+features in its output script. The transaction cannot be mined before activation. Such outputs would\n+not be covered by an amnesty for old UTxOs. See for instance [here][O'Connor OP_CODESEPARATOR] and\n+[here][O'Connor sighash type] for discussions on this topic.\n+[^6]: It is important to reduce the worst case block validation time as well as the ratio of\n+validation time imposed over preparation cost. The former is to limit the damages an externally\n+motivated attacker can do. The latter is to disincentivize miners slowing down their competition by\n+mining expensive blocks. See [this thread][ML thread validation time] for more.\n+[^7]: A non-pathological transaction would have a public key per signature operation and at least\n+one signature per input. Per standardness a single P2SH input may not have more than 15 signature\n+operations. Even by using 1-of-15 `CHECKMULTISIG`s a transaction would bump against the maximum\n+standard transaction size before running into the newly introduced limit. To run against the newly\n+introduced limit but not the transaction size a transaction would need to spend P2SH inputs with a\n+redeem script similar to `CHECKSIG DROP CHECKSIG DROP ..`. This type of redeem script serves no",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 174,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014941559,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Really?..\r\n\r\n*(see what i did here?)*",
      "created_at": "2025-03-31T21:03:10Z",
      "updated_at": "2025-03-31T21:03:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021761546",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021761546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021776539",
      "pull_request_review_id": 2730525677,
      "id": 2021776539,
      "node_id": "PRRC_kwDOAN28mc54gdyb",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 61,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2015007365,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is this better?\r\n```suggestion\r\n  equal to the value minus `7200` of the `nTime` field of block at height `N-1`;\r\n```",
      "created_at": "2025-03-31T21:16:38Z",
      "updated_at": "2025-03-31T21:16:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021776539",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021776539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021777231",
      "pull_request_review_id": 2730526768,
      "id": 2021777231,
      "node_id": "PRRC_kwDOAN28mc54gd9P",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939656,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here is my attempt at rewriting the section, with the main goal to avoid implying that 2500 is the maximum count of CHECKSIG and CHECKMULTISIG opcodes before explaining how they actually contribute to the total:\r\n```suggestion\r\nA limit is set on the number of potentially executed signature operations in validating a\r\ntransaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\r\neach input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\r\nscriptSig and previous output's scriptPubKey, including the P2SH redeemScript. A `CHECKSIG`\r\noperation contributes 1 to the total, and a `CHECKMULTISIG` contributes the number of public\r\nkeys associated, or 20 if the number of public keys is greater than 16. A `CHECKMULTISIG` not\r\ndirectly preceded by a minimally-pushed number between 1 and 16 (included) contributes 20 to\r\nthe total. If the total is strictly higher than 2500, the transaction is invalid.\r\n```",
      "created_at": "2025-03-31T21:17:17Z",
      "updated_at": "2025-03-31T21:17:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021777231",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021777231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021780646",
      "pull_request_review_id": 2730532041,
      "id": 2021780646,
      "node_id": "PRRC_kwDOAN28mc54geym",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 60,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939587,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "From what I can tell, the other terms you mention enjoy pretty wide use outside of Bitcoin Core, however you could definitely replace them in line with [Murch's transaction terminology BIP](https://github.com/murchandamus/bips/blob/730a813124680a417f44bfe8117afbc89fd1ea6c/bip-tx-terminology.mediawiki) (i.e. locktime, sequence, input script and output script).",
      "created_at": "2025-03-31T21:20:12Z",
      "updated_at": "2025-03-31T21:20:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021780646",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021780646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021814130",
      "pull_request_review_id": 2730587035,
      "id": 2021814130,
      "node_id": "PRRC_kwDOAN28mc54gm9y",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 83,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939899,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes, the en dash (–) is commonly used to connect names in a compound name to distinguish them from a double-barrelled name which uses a hyphen (-). That's how you know, for example, that the Gell-Mann–Okubo mass formula was named after two people, Gell-Mann and Okubo.\r\n\r\nIf you're not sure how to produce an en dash, copypasting it is fine too 😉  Alternatively, if neither Murch nor Zawy care about not being mistaken for the same person named Murch-Zawy, feel free to leave as is.",
      "created_at": "2025-03-31T21:40:39Z",
      "updated_at": "2025-03-31T21:40:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2021814130",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2021814130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022360788",
      "pull_request_review_id": 2731844051,
      "id": 2022360788,
      "node_id": "PRRC_kwDOAN28mc54isbU",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 26,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939061,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You're welcome to improve the flow if you prefer that. Right now there's paragraph transitions like this:\r\n\r\n> ... bring fee rates down for users.\r\n\r\n> Specially crafted blocks may be expensive to process, ...",
      "created_at": "2025-04-01T08:06:14Z",
      "updated_at": "2025-04-01T08:06:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022360788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022360788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022369536",
      "pull_request_review_id": 2731858617,
      "id": 2022369536,
      "node_id": "PRRC_kwDOAN28mc54iukA",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 60,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939587,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The Murch BIP seems like a good place to start. It uses the term \"lock time\" with \"Synonym: `nLockTime`\". So I guess that's normal language vs. suggested variable name? \"The lock time is given by `nLockTime`.\"\r\n\r\nThe BIP also mentions a few cases where you should _not_ use a Bitcoin Core variable, e.g. `VarInt`.",
      "created_at": "2025-04-01T08:12:02Z",
      "updated_at": "2025-04-01T08:12:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022369536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022369536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022970099",
      "pull_request_review_id": 2732894863,
      "id": 2022970099,
      "node_id": "PRRC_kwDOAN28mc54lBLz",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving\n+Murch-Zawy].\n+[^4]: A bug in testnet4 pushed blocks' timestamps in the future when exploited, revealing how some",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 156,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2017012556,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, \"bug\" is not a correct characterization since it was intentional. However i think \"exploited\" is fair since people apparently assumed all participants would always be honest, and, well, they are not.\r\n\r\nI went with \"abused\" to use a little bit less loaded language:\r\n```suggestion\r\n[^4]: The testnet4 exception pushed blocks' timestamps in the future when abused, revealing how some\r\n```\r\n\r\nWhat do you think?",
      "created_at": "2025-04-01T14:22:38Z",
      "updated_at": "2025-04-01T14:22:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022970099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022970099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022974794",
      "pull_request_review_id": 2732903049,
      "id": 2022974794,
      "node_id": "PRRC_kwDOAN28mc54lCVK",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.\n+\n+# Acknowledgements\n+\n+This document builds upon an [earlier proposal][BIP-XXXX] by one of the authors.\n+\n+The authors would like to thank everyone involved in researching the most appropriate mitigation for\n+each of these bugs. We would like to thank in particular Anthony Towns and Sjors Provoost for their\n+direct contributions to this proposal, as well as @0xb10c and Brian Groll for providing the authors\n+with data to analyze the proposed mitigations.\n+\n+# Copyright\n+\n+This document is licensed under the Creative Commons CC0 1.0 Universal license.\n+\n+\n+[^0]: Block 1,983,702 is the earliest future block which could contain a duplicate coinbase\n+transaction while still respecting [bip-0034][BIP34]. See [this post][Delving duplicable] for a list\n+of all such future blocks.\n+[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\n+input's scriptSig is limited.\n+[^2]: The locktime validation, which is also performed for coinbase transactions, enforces that the\n+nLockTime value is the last block at which a transaction is invalid, not the first one at which it\n+is valid.\n+[^3]: The timewarp attack is described [here][SE timewarp] and the Murch-Zawy attack [here][Delving\n+Murch-Zawy].\n+[^4]: A bug in testnet4 pushed blocks' timestamps in the future when exploited, revealing how some",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 156,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2017012556,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "maybe s/exception/difficulty exception/ but otherwise sounds good to me!",
      "created_at": "2025-04-01T14:25:11Z",
      "updated_at": "2025-04-01T14:25:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022974794",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022974794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022981378",
      "pull_request_review_id": 2732914306,
      "id": 2022981378,
      "node_id": "PRRC_kwDOAN28mc54lD8C",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 55,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2017023175,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried doing this but i couldn't find a way that did not add unnecessary clutter. It just seems seems to me that introducing numbers does not make the rules easier to reference. For instance \"The Consensus Cleanup timewarp fix\" is just clearer and less confusing than \"The Consensus Cleanup rule 1\".",
      "created_at": "2025-04-01T14:28:36Z",
      "updated_at": "2025-04-01T14:28:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022981378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022981378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022992272",
      "pull_request_review_id": 2732932527,
      "id": 2022992272,
      "node_id": "PRRC_kwDOAN28mc54lGmQ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 108,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016113103,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems the only actionable item left in this review comment is:\r\n> It would be good to elaborate on these two specific claims.\r\n\r\nI'm not sure how to elaborate further than that. I think this is enough for the reader to think about it and convince themselves it is the case and more information would just be superfluous. Closing this but feel free to reopen if you have a suggestion.",
      "created_at": "2025-04-01T14:34:15Z",
      "updated_at": "2025-04-01T14:34:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2022992272",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2022992272"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023210924",
      "pull_request_review_id": 2733325865,
      "id": 2023210924,
      "node_id": "PRRC_kwDOAN28mc54l7-s",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 83,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939899,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I for one have never seen @murchandamus and @zawy12 in the same room at the same time!",
      "created_at": "2025-04-01T16:40:16Z",
      "updated_at": "2025-04-01T16:40:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023210924",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023210924"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023217636",
      "pull_request_review_id": 2733336845,
      "id": 2023217636,
      "node_id": "PRRC_kwDOAN28mc54l9nk",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 65,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016069142,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think dis-disambiguating \"transaction *inputs*\" is redundant with \"signature operations in validating\". Signature validation always occurs in validating a transaction's inputs.\r\n\r\nAs for the footnote i already have a similar one:\r\n> \\[^1]: Technically this limit *cannot* apply to a coinbase transaction as the size of its sole\r\ninput's scriptSig is limited.",
      "created_at": "2025-04-01T16:44:52Z",
      "updated_at": "2025-04-01T16:44:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023217636",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023217636"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023223400",
      "pull_request_review_id": 2733346090,
      "id": 2023223400,
      "node_id": "PRRC_kwDOAN28mc54l_Bo",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 68,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016082978,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think we should talk about witnesses or the segwit sigops discount. This explicitly mentions `scriptPubKey` (with bip16 `redeemScript`) and `scriptSig`.\r\n\r\nGood point for the `VERIFY` version of opcodes.",
      "created_at": "2025-04-01T16:48:53Z",
      "updated_at": "2025-04-01T16:48:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023223400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023223400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023238498",
      "pull_request_review_id": 2733369494,
      "id": 2023238498,
      "node_id": "PRRC_kwDOAN28mc54mCti",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure about this. That miners should respect the `mintime` is not new, not a change they need to make and would be out of place here. That miner should run software that enforces the new consensus rules makes sense for any soft fork and is not specific to this BIP, or to miners specifically for that matter. The same goes for the rest.",
      "created_at": "2025-04-01T16:59:07Z",
      "updated_at": "2025-04-01T16:59:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023238498",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023238498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023246142",
      "pull_request_review_id": 2733378922,
      "id": 2023246142,
      "node_id": "PRRC_kwDOAN28mc54mEk-",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 83,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939899,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Done.",
      "created_at": "2025-04-01T17:00:23Z",
      "updated_at": "2025-04-01T17:00:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023246142",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023246142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023483154",
      "pull_request_review_id": 2733719813,
      "id": 2023483154,
      "node_id": "PRRC_kwDOAN28mc54m-cS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939656,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Took your suggestion of only mentioning the limit at the end. Reworded to fit in @Sjors' point about explicitly mentioning the `VERIFY` counterparts to the operations. How do you find it now?",
      "created_at": "2025-04-01T18:33:43Z",
      "updated_at": "2025-04-01T18:33:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023483154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023483154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023500116",
      "pull_request_review_id": 2733748853,
      "id": 2023500116,
      "node_id": "PRRC_kwDOAN28mc54nClU",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 3,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "404010f176ec5e90c8e634c685498c12a01ec921",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  Layer: Consensus (soft fork)\r\n  Title: Consensus Cleanup\r\n```",
      "created_at": "2025-04-01T18:47:12Z",
      "updated_at": "2025-04-01T18:49:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023500116",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023500116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023501157",
      "pull_request_review_id": 2733748853,
      "id": 2023501157,
      "node_id": "PRRC_kwDOAN28mc54nC1l",
      "diff_hunk": "@@ -0,0 +1,206 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 10,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "404010f176ec5e90c8e634c685498c12a01ec921",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "According to BIP 2, the created date contains the date a number was assigned.\r\n\r\n```suggestion\r\n  Created: ?\r\n```",
      "created_at": "2025-04-01T18:48:00Z",
      "updated_at": "2025-04-01T18:49:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023501157",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023501157"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023585615",
      "pull_request_review_id": 2733895917,
      "id": 2023585615,
      "node_id": "PRRC_kwDOAN28mc54nXdP",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 60,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939587,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Changed \"`nTime` field\" for \"timestamp\".",
      "created_at": "2025-04-01T19:48:38Z",
      "updated_at": "2025-04-01T19:48:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023585615",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023585615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023623219",
      "pull_request_review_id": 2733959015,
      "id": 2023623219,
      "node_id": "PRRC_kwDOAN28mc54ngoz",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939656,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Looks good now. Personally I wouldn't use backticks for numbers (like I would for variable names), that doesn't seem to be a common style (including in BIPs), and the current version isn't even consistent about it, but that's beside the point of this thread.",
      "created_at": "2025-04-01T20:20:33Z",
      "updated_at": "2025-04-01T20:20:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2023623219",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2023623219"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024330395",
      "pull_request_review_id": 2735174494,
      "id": 2024330395,
      "node_id": "PRRC_kwDOAN28mc54qNSb",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 65,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016069142,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Someone might wonder if we're including signature operations in the `scriptPubKey` for e.g. bare multisig. That's also covered by the term \"potentially executed\". Still, I think stating that the rule only impacts inputs is more clear than making it implicit.",
      "created_at": "2025-04-02T08:26:19Z",
      "updated_at": "2025-04-02T08:26:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2024330395",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024330395"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024334092",
      "pull_request_review_id": 2735192640,
      "id": 2024334092,
      "node_id": "PRRC_kwDOAN28mc54qOMM",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 68,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016082978,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> I don't think we should talk about witnesses or the segwit sigops discount.\r\n\r\nThat's going to confuse people. Unless you come up with completely different terminology, it's logical to assume legacy sigops are multiplied by 4.",
      "created_at": "2025-04-02T08:28:27Z",
      "updated_at": "2025-04-02T08:28:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2024334092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024334092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024342720",
      "pull_request_review_id": 2735233528,
      "id": 2024342720,
      "node_id": "PRRC_kwDOAN28mc54qQTA",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Which previous soft fork required miners to upgrade their full stack to produce valid blocks, rather than just their node? E.g. SegWit didn't, because by default blocks don't mandate a witness commitment.\r\n\r\nA miner could simply upgrade their node, which is only need to prevent mining on top of an invalid block. They weren't required to upgrade their stratum code immediately to produce SegWit blocks. \r\n\r\n`mintime` isn't new, but still a good reminder. And upgrading their stratum v1 stack to something that supports a completely new BIP, otherwise they won't set `nLockTime`, is absolutely critical. And it shouldn't come as an implementation detail surprise after this BIP is widely accepted.",
      "created_at": "2025-04-02T08:33:18Z",
      "updated_at": "2025-04-02T08:35:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2024342720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2024342720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025593192",
      "pull_request_review_id": 2737575925,
      "id": 2025593192,
      "node_id": "PRRC_kwDOAN28mc54vBlo",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Sorry, what in this BIP do you believe requires upgrading the Stratum v1 protocol?",
      "created_at": "2025-04-02T21:01:22Z",
      "updated_at": "2025-04-02T21:01:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2025593192",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025593192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025600260",
      "pull_request_review_id": 2737588099,
      "id": 2025600260,
      "node_id": "PRRC_kwDOAN28mc54vDUE",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 73,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2014939656,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed backticks for numbers all across the document.",
      "created_at": "2025-04-02T21:05:15Z",
      "updated_at": "2025-04-02T21:05:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2025600260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025600260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 65,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025603776",
      "pull_request_review_id": 2737593436,
      "id": 2025603776,
      "node_id": "PRRC_kwDOAN28mc54vELA",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 68,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016082978,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The specifications you are commenting on literally spell out the algorithm to count the operations and the limit itself. I don't see what here is confusing, or why an implementer would somehow introduce a magic 4x multiplier out of the blue. However i can see how discussing segwit sigop discount or mentioning the 4x multiplier used in other contexts could get people confused.",
      "created_at": "2025-04-02T21:08:23Z",
      "updated_at": "2025-04-02T21:08:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2025603776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025603776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025608978",
      "pull_request_review_id": 2737601103,
      "id": 2025608978,
      "node_id": "PRRC_kwDOAN28mc54vFcS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 65,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016069142,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There is no need to wonder. It is clearly specified \"For each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input scriptSig and previous output's scriptPubKey\". I don't think this can be clearer: i don't see how an implementer could be mislead to go through the transaction outputs instead.",
      "created_at": "2025-04-02T21:11:21Z",
      "updated_at": "2025-04-02T21:11:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2025608978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025608978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2026895491",
      "pull_request_review_id": 2739674021,
      "id": 2026895491,
      "node_id": "PRRC_kwDOAN28mc54z_iD",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The changes to the coinbase need to be added to `getblocktemplate` and Stratum v1 software which relies on that RPC needs to use these fields. ",
      "created_at": "2025-04-03T12:29:29Z",
      "updated_at": "2025-04-03T12:29:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2026895491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2026895491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2027213652",
      "pull_request_review_id": 2740247602,
      "id": 2027213652,
      "node_id": "PRRC_kwDOAN28mc541NNU",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is not a change in the Stratum v1 protocol. GBT changes have historically been part of a different BIP (see for instance [bip-0145](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki)) and this is what i intend to do here, if at all necessary.",
      "created_at": "2025-04-03T15:06:17Z",
      "updated_at": "2025-04-03T15:06:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2027213652",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2027213652"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028840000",
      "pull_request_review_id": 2743045788,
      "id": 2028840000,
      "node_id": "PRRC_kwDOAN28mc547aRA",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "BIP 145 was optional. Miners weren't required to upgrade before SegWit activation, they could do so whenever they felt like mining a segwit block. It even has documentation on how to support unupgraded miners.\r\n\r\nIt's fine to define these details in another BIP, but this BIP should point out that it's mandatory and has to be done _before_ activation.",
      "created_at": "2025-04-04T13:41:57Z",
      "updated_at": "2025-04-04T13:41:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028840000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028840000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028848662",
      "pull_request_review_id": 2743060209,
      "id": 2028848662,
      "node_id": "PRRC_kwDOAN28mc547cYW",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Some historical discussion about how long it took for miners to upgrade their pool software _after_ SegWit activated: https://bitcoin.stackexchange.com/q/86208/4948\r\n\r\n\r\n\r\n",
      "created_at": "2025-04-04T13:47:16Z",
      "updated_at": "2025-04-04T13:47:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028848662",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028848662"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028973045",
      "pull_request_review_id": 2743285135,
      "id": 2028973045,
      "node_id": "PRRC_kwDOAN28mc5476v1",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 18,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\ncase block validation time, prevent Merkle tree weaknesses, and avoid duplicate transactions without\r\n```",
      "created_at": "2025-04-04T14:51:14Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028973045",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028973045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028980440",
      "pull_request_review_id": 2743285135,
      "id": 2028980440,
      "node_id": "PRRC_kwDOAN28mc5478jY",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 28,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "No comma here makes it clearer that the increase of the block rate is causing the stealing of block subsidy and increased validation cost:\r\n\r\n```suggestion\r\nallowing them to steal block subsidy from future miners and increase validation costs to nodes that\r\n```",
      "created_at": "2025-04-04T14:56:05Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028980440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028980440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028987986",
      "pull_request_review_id": 2743285135,
      "id": 2028987986,
      "node_id": "PRRC_kwDOAN28mc547-ZS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 61,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n- if `N % 2016` is equal to 0, the timestamp of the block must be set to a value higher than or\r\n```",
      "created_at": "2025-04-04T15:00:20Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028987986",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028987986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028990200",
      "pull_request_review_id": 2743285135,
      "id": 2028990200,
      "node_id": "PRRC_kwDOAN28mc547-74",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 64,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n  or equal to the value of the timestamp of the block at height `N-2015`.\r\n```",
      "created_at": "2025-04-04T15:01:49Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2028990200",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2028990200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029000124",
      "pull_request_review_id": 2743285135,
      "id": 2029000124,
      "node_id": "PRRC_kwDOAN28mc548BW8",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 67,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Active voice is usually preferred in technical writing, because it is clearer:\r\n\r\n```suggestion\r\nThe number of potentially executed signature operations in validating a\r\ntransaction is limited. The limit applies to all transactions except coinbase transactions[^1]. For\r\n```",
      "created_at": "2025-04-04T15:08:52Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029000124",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029000124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029008420",
      "pull_request_review_id": 2743285135,
      "id": 2029008420,
      "node_id": "PRRC_kwDOAN28mc548DYk",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 69,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The P2SH redeem script is part of the input script, so I was surprised that it is explicitly mentioned here.",
      "created_at": "2025-04-04T15:13:49Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029008420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029008420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029013940",
      "pull_request_review_id": 2743285135,
      "id": 2029013940,
      "node_id": "PRRC_kwDOAN28mc548Eu0",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 96,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I would read \"to pinpoint\" as \"precisely locate\", but from the context I think a meaning of \"to prevent\" would be more fitting:\r\n\r\n```suggestion\r\nthis effect a limit on the number of potentially executed signature operations mitigates exactly the\r\n```",
      "created_at": "2025-04-04T15:17:26Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029013940",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029013940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029020530",
      "pull_request_review_id": 2743285135,
      "id": 2029020530,
      "node_id": "PRRC_kwDOAN28mc548GVy",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 97,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps:\r\n\r\n```suggestion\r\nharmful behaviour, reducing the flexibility of Script functionality the least.\r\n```",
      "created_at": "2025-04-04T15:21:15Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029020530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029020530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029026358",
      "pull_request_review_id": 2743285135,
      "id": 2029026358,
      "node_id": "PRRC_kwDOAN28mc548Hw2",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 109,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I just noticed that you use \"output script\" here, but \"scriptPubKey\" before. It would be preferable that the same term is used to refer to the same abstract concept throughout the document.",
      "created_at": "2025-04-04T15:24:12Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029026358",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029026358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029027815",
      "pull_request_review_id": 2743285135,
      "id": 2029027815,
      "node_id": "PRRC_kwDOAN28mc548IHn",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 110,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n6 years at the time this is written. It was suggested that the known vulnerabilities could instead be\r\n```",
      "created_at": "2025-04-04T15:24:56Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029027815",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029027815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029033658",
      "pull_request_review_id": 2743285135,
      "id": 2029033658,
      "node_id": "PRRC_kwDOAN28mc548Ji6",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 120,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nmandate that future coinbase transactions vary from coinbase transactions before\r\n```",
      "created_at": "2025-04-04T15:27:54Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029033658",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029033658"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029035419",
      "pull_request_review_id": 2743285135,
      "id": 2029035419,
      "node_id": "PRRC_kwDOAN28mc548J-b",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 121,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n[bip-0034][BIP34] activation. There are multiple ways of achieving this, but setting and enforcing the timelock\r\n```",
      "created_at": "2025-04-04T15:28:32Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029035419",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029035419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029038611",
      "pull_request_review_id": 2743285135,
      "id": 2029038611,
      "node_id": "PRRC_kwDOAN28mc548KwT",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This doesn’t seem complete. The requirement to set and enforce the locktime is not backward-compatible for block producers.",
      "created_at": "2025-04-04T15:30:31Z",
      "updated_at": "2025-04-04T15:40:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029038611",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029038611"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029056375",
      "pull_request_review_id": 2743472600,
      "id": 2029056375,
      "node_id": "PRRC_kwDOAN28mc548PF3",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;\n+- if `N % 2016` is equal to `2015` the `nTime` field of the block must be set to a value higher than\n+  or equal to the value of the `nTime` field of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. If the total is\n+strictly higher than `2500`, the transaction is invalid. The accounting is the same as for\n+[bip-0016][BIP16 specs]: a `CHECKSIG` operation accounts for `1` and a `CHECKMULTISIG` accounts for\n+the number of public keys associated, or `20` if the number of public keys is greater than `16`. A\n+`CHECKMULTISIG` not directly preceded by a minimally-pushed number between `1` and `16` (included)\n+accounts for `20`.\n+\n+Transactions whose (witness-stripped) serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus `1`[^2]\n+and its `nSequence` field must not be equal to `0xffffffff`.\n+\n+# Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch-Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+to be lower than the previous block's, with a two hours grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten minutes grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two hours grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The `2500`\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64 bytes transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64 bytes transaction may be\n+interpreted as the catenation of two 32 bytes hashes, or the catenation of two 32 bytes hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64 bytes transactions can only contain an\n+output Script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64 bytes transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction such as its\n+scriptSig contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an\n+opportunity to duplicate these coinbase transactions in the future[^10] and for this reason\n+[bip-0030][BIP30] validation will need to be re-activated from block 1,983,702. A simple way to\n+prevent this is to mandate that future coinbase transactions vary slightly from coinbase\n+transactions before [bip-0034][BIP34] activation. There are multiple ways of achieving this, but\n+enforcing the timelock for the coinbase transaction makes it so all coinbase transactions past\n+Consensus Cleanup activation could not have been valid before this height and therefore cannot be a\n+duplicate[^11].\n+\n+# Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2016143661,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I second @Sjors here, even if some of the requirements were already present in similar form, it doesn’t hurt to explicitly mention them here.",
      "created_at": "2025-04-04T15:42:23Z",
      "updated_at": "2025-04-04T15:42:24Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029056375",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029056375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029089426",
      "pull_request_review_id": 2743529419,
      "id": 2029089426,
      "node_id": "PRRC_kwDOAN28mc548XKS",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 69,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029008420,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not, the redeem script is just a data push in the input script, and it's only when the previous output matches the P2SH template that it gets special treatment. Not mentioning it explicitly would definitely make it ambiguous as to whether it's included in the count.",
      "created_at": "2025-04-04T16:06:37Z",
      "updated_at": "2025-04-04T16:06:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029089426",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029089426"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029095281",
      "pull_request_review_id": 2743539522,
      "id": 2029095281,
      "node_id": "PRRC_kwDOAN28mc548Ylx",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 97,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029020530,
      "user": {
        "login": "vostrnad",
        "id": 43024885,
        "node_id": "MDQ6VXNlcjQzMDI0ODg1",
        "avatar_url": "https://avatars.githubusercontent.com/u/43024885?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vostrnad",
        "html_url": "https://github.com/vostrnad",
        "followers_url": "https://api.github.com/users/vostrnad/followers",
        "following_url": "https://api.github.com/users/vostrnad/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vostrnad/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vostrnad/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vostrnad/subscriptions",
        "organizations_url": "https://api.github.com/users/vostrnad/orgs",
        "repos_url": "https://api.github.com/users/vostrnad/repos",
        "events_url": "https://api.github.com/users/vostrnad/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vostrnad/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I like that the current version says \"may have been used\", it emphasizes that this change only affects legacy scripts that aren't meant to be used anymore. We aren't really reducing the flexibility of Script as a whole.",
      "created_at": "2025-04-04T16:11:07Z",
      "updated_at": "2025-04-04T16:11:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029095281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029095281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029450291",
      "pull_request_review_id": 2744126549,
      "id": 2029450291,
      "node_id": "PRRC_kwDOAN28mc549vQz",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nLockTime is the most ideal location to put an extranonce, so it seems like a bad idea to burn it for no good reason.",
      "created_at": "2025-04-04T21:20:40Z",
      "updated_at": "2025-04-04T21:20:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2029450291",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2029450291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031244814",
      "pull_request_review_id": 2746826505,
      "id": 2031244814,
      "node_id": "PRRC_kwDOAN28mc55ElYO",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029450291,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@luke-jr why would miners switch to something different from the current extraNonce?",
      "created_at": "2025-04-07T13:27:33Z",
      "updated_at": "2025-04-07T13:27:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031244814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031244814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031334086",
      "pull_request_review_id": 2746978344,
      "id": 2031334086,
      "node_id": "PRRC_kwDOAN28mc55E7LG",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 18,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2028973045,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is on purpose. I thought it was a mistake to use a comma before a conjunction, as it's the case in French. Turns out in English it's more complicated than that.\r\n\r\nIn the case of an enumeration like here, [\"Grammar-Monster\" says](https://www.grammar-monster.com/lessons/conjunctions_and_commas.htm) that a comma is to be used for American English but not for British English.\r\n\r\nAs the set of rules surrounding commas before a conjunction in English is so simple, they even summarized it an algorithm! TIL:\r\n![image](https://github.com/user-attachments/assets/65340139-cf1f-4516-bc01-1b94d23948d0)\r\n",
      "created_at": "2025-04-07T14:08:52Z",
      "updated_at": "2025-04-07T14:08:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031334086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031334086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 18,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031345651",
      "pull_request_review_id": 2746997728,
      "id": 2031345651,
      "node_id": "PRRC_kwDOAN28mc55E9_z",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 67,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029000124,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This is not active voice?",
      "created_at": "2025-04-07T14:14:46Z",
      "updated_at": "2025-04-07T14:14:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031345651",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031345651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031357081",
      "pull_request_review_id": 2747016618,
      "id": 2031357081,
      "node_id": "PRRC_kwDOAN28mc55FAyZ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 96,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029013940,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this suggestion changes the meaning. What i intend to convey is exactly how you would read it: it precisely disable the harmful behaviour to avoid making uninteresting-but-harmless usage invalid.",
      "created_at": "2025-04-07T14:20:33Z",
      "updated_at": "2025-04-07T14:20:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031357081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031357081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031360017",
      "pull_request_review_id": 2747022366,
      "id": 2031360017,
      "node_id": "PRRC_kwDOAN28mc55FBgR",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 109,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029026358,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes. I like your terminology BIP, but i think i will go for the more common scriptPubKey instead.",
      "created_at": "2025-04-07T14:22:02Z",
      "updated_at": "2025-04-07T14:22:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031360017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031360017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031386899",
      "pull_request_review_id": 2747066573,
      "id": 2031386899,
      "node_id": "PRRC_kwDOAN28mc55FIET",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm confused. This seems to directly follow for any consensus change: miners must take steps to produce blocks valid according to the new rules. I don't mind adding a sentence to this effect, but as far as i know the backwards compatibility section has always been used to discuss the backwards compatibility from the point of view of end users, not miners (since by definition block producers need to adapt if we are going to change block validity). See for instance the [backwards compatibility section of the SegWit soft fork](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#user-content-Backward_compatibility). Why change now?",
      "created_at": "2025-04-07T14:35:10Z",
      "updated_at": "2025-04-07T14:35:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031386899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031386899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031431469",
      "pull_request_review_id": 2747141811,
      "id": 2031431469,
      "node_id": "PRRC_kwDOAN28mc55FS8t",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I tried adding something to this effect but anything i come up with just seems needlessly redundant and vague. For instance:\r\n```suggestion\r\nThis proposal only tightens the block validation rules: there is no block that is valid under the\r\nrules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\r\nthese changes are backward-compatible with unupgraded node software. That said, the authors strongly\r\nencourage node operators to upgrade in order to fully validate all consensus rules.\r\n\r\nAs with any consensus change, miners need to take precautions to produce blocks compatible with the\r\nnew rules. In particular this BIP introduces restrictions on the coinbase transaction and block\r\nheader timestamp, which are often set by closed source pool software.\r\n```",
      "created_at": "2025-04-07T14:53:46Z",
      "updated_at": "2025-04-07T14:54:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031431469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031431469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031435722",
      "pull_request_review_id": 2747148351,
      "id": 2031435722,
      "node_id": "PRRC_kwDOAN28mc55FT_K",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 97,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029020530,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Agree with Vojtěch. Not taking the suggestion.",
      "created_at": "2025-04-07T14:55:49Z",
      "updated_at": "2025-04-07T14:55:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031435722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031435722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031534455",
      "pull_request_review_id": 2747313136,
      "id": 2031534455,
      "node_id": "PRRC_kwDOAN28mc55FsF3",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029450291,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It would have been better to bring up conceptual feedback on the mailing list. \"For no good reason\" is unnecessarily aggressive, the point here is not to make things invalid just for the sake of it. Please engage charitably to foster productive discussions.\r\n\r\nTo your point, it's my understanding that `nLockTime` makes for a good extranonce because it's serialized at the very end of the coinbase transaction. Rolling it does not require re-hashing the whole transaction as you can just cache a midstate for the first 64 bytes. Could you provide more details about how you expect it to be used exactly, and under what circumstances the operation it improves may become a bottleneck?",
      "created_at": "2025-04-07T15:45:12Z",
      "updated_at": "2025-04-07T15:45:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2031534455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2031534455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2035322145",
      "pull_request_review_id": 2753397304,
      "id": 2035322145,
      "node_id": "PRRC_kwDOAN28mc55UI0h",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "zawy12",
        "id": 18004719,
        "node_id": "MDQ6VXNlcjE4MDA0NzE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/18004719?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/zawy12",
        "html_url": "https://github.com/zawy12",
        "followers_url": "https://api.github.com/users/zawy12/followers",
        "following_url": "https://api.github.com/users/zawy12/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/zawy12/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/zawy12/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/zawy12/subscriptions",
        "organizations_url": "https://api.github.com/users/zawy12/orgs",
        "repos_url": "https://api.github.com/users/zawy12/repos",
        "events_url": "https://api.github.com/users/zawy12/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/zawy12/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Instead of \r\n\"This proposal only tightens the block validation rules: there is no block that is valid under the\r\nrules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\r\nthese changes are backward-compatible with unupgraded node software. That said, the authors strongly\r\nencourage node operators to upgrade in order to fully validate all consensus rules.\" \r\nI would say\r\n\"The proposal tightens the block validation rules. It doesn't invalidate any existing blocks to be backwards-compatible. Nodes should upgrade to ensure future blocks that are invalid under the proposal are not validated.\"",
      "created_at": "2025-04-09T13:01:05Z",
      "updated_at": "2025-04-09T15:13:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2035322145",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2035322145"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2036465290",
      "pull_request_review_id": 2755274921,
      "id": 2036465290,
      "node_id": "PRRC_kwDOAN28mc55Yf6K",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029450291,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": ">@luke-jr why would miners switch to something different from the current extraNonce?\r\n\r\nThere is no \"current extraNonce\". Extranonces can be anywhere in theory. But this particular location, as @darosior says, minimises the need to re-hash a lot of data to roll it. That means it can more practically be done on ASICs or MCUs with nearly no latency.",
      "created_at": "2025-04-10T04:16:16Z",
      "updated_at": "2025-04-10T04:16:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2036465290",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2036465290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2044291374",
      "pull_request_review_id": 2767876782,
      "id": 2044291374,
      "node_id": "PRRC_kwDOAN28mc552Wku",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029450291,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can you do the same with an output? Since a coinbase doesn't have any inputs to sign (which commit to outputs), rolling an `OP_RETURN` output should be just as easy and there's no space limit?",
      "created_at": "2025-04-15T11:18:47Z",
      "updated_at": "2025-04-15T11:19:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2044291374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2044291374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2044641052",
      "pull_request_review_id": 2768429023,
      "id": 2044641052,
      "node_id": "PRRC_kwDOAN28mc553r8c",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 78,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029450291,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "@luke-jr i see how it might be useful in theory but i don't think it would be in realistic conditions. Could you describe (ideally on the ML or Delving thread) the specifics of a future ASIC design where it would matter?",
      "created_at": "2025-04-15T14:01:44Z",
      "updated_at": "2025-04-15T14:04:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2044641052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2044641052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2045702532",
      "pull_request_review_id": 2770171302,
      "id": 2045702532,
      "node_id": "PRRC_kwDOAN28mc557vGE",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 67,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029000124,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "You are right, it’s not.",
      "created_at": "2025-04-15T23:28:31Z",
      "updated_at": "2025-04-15T23:28:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2045702532",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2045702532"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2045710722",
      "pull_request_review_id": 2770185114,
      "id": 2045710722,
      "node_id": "PRRC_kwDOAN28mc557xGC",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "AFAIU,\r\n\r\n- Backward-compatible means new software being able to read data generated by old software.\r\n- Forward-compatible means old software being able to read data generated by new software.\r\n\r\nHow about:\r\n\r\n```diff\r\n-This proposal only tightens the block validation rules: there is no block that is valid under the\r\n-rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\r\n-these changes are backward-compatible with unupgraded node software. That said, the authors strongly\r\n-encourage node operators to upgrade in order to fully validate all consensus rules.\r\n+This proposal only tightens the block validation rules: any block that would be valid under the\r\n+rules proposed in this BIP is valid under the existing Bitcoin consensus rules. As a consequence\r\n+these changes are forward-compatible to unupgraded node software. That said, the authors strongly\r\n+encourage node operators to upgrade in order to fully validate all consensus rules.\r\n+\r\n+Block producers will need to upgrade to new software to produce valid blocks per the new rules.\r\n```",
      "created_at": "2025-04-15T23:39:49Z",
      "updated_at": "2025-04-15T23:39:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2045710722",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2045710722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047689657",
      "pull_request_review_id": 2773750691,
      "id": 2047689657,
      "node_id": "PRRC_kwDOAN28mc56DUO5",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> ```diff\r\n> +any block that would be valid under the\r\n> +rules proposed in this BIP is valid under the existing Bitcoin consensus rules. As a consequence\r\n> +these changes are forward-compatible to unupgraded node software.\r\n> ```\r\n\r\nThis is backward. The changes are backward-compatible with unupgraded nodes. Nodes are forward-compatible with future soft forks.\r\n\r\n> ```diff\r\n> +Block producers will need to upgrade to new software to produce valid blocks per the new rules.\r\n> ```\r\n\r\nAgain, this is by definition true of any single soft fork. I don't see why we should start mentioning now as if it was something specific to Consensus Cleanup.\r\n\r\nI don't think there is much more to do here.",
      "created_at": "2025-04-16T20:22:46Z",
      "updated_at": "2025-04-16T20:22:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2047689657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047689657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047696434",
      "pull_request_review_id": 2773761468,
      "id": 2047696434,
      "node_id": "PRRC_kwDOAN28mc56DV4y",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-03-17\n+  License: CC0-1.0\n+```\n+\n+# Abstract\n+\n+Introduce new consensus rules in order to fix the timewarp attack, reduce the worst case block\n+validation, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+# Motivation\n+\n+This proposal addresses a number of long standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling those fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than a hour on lower end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and reduced network security.\n+\n+In computing a block's Merkle root, a 64 bytes transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64 bytes block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Bitcoin Script.\n+\n+# Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to `0` the `nTime` field of the block must be set to a value higher than or\n+  equal to the value of the `nTime` field of block at height `N-1` minus `7200`;",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 61,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "098894f04f41494b0329a3e0479e27f33f841812",
      "in_reply_to_id": 2015007365,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm not sure how i could phrase it with \"minus 7200\" not following `N-1` that is also not too heavy. But i'm not sure it's necessary, especially when rendered it seems fairly clear:\r\n![image](https://github.com/user-attachments/assets/f146240c-4965-4828-844a-d6912bdb53e1)\r\n\r\nSo i'm going to close this, let me know if you have a suggestion and i'll reopen.",
      "created_at": "2025-04-16T20:27:52Z",
      "updated_at": "2025-04-16T20:27:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2047696434",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047696434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047853539",
      "pull_request_review_id": 2774001760,
      "id": 2047853539,
      "node_id": "PRRC_kwDOAN28mc56D8Pj",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see that I will have to be careful to be more precise in this pull request. \r\n\r\nI’m  just thinking that you will get a bunch of readers to whom it is not obvious that miners have to upgrade for a soft fork, and where e.g., SegWit did accept some portion of old blocks, this change will require them to upgrade. Therefore, I think it wouldn’t be unreasonable to mention that miners will have to upgrade to produce valid blocks, even if it may seem obvious.",
      "created_at": "2025-04-16T22:29:02Z",
      "updated_at": "2025-04-16T22:29:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2047853539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2047853539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2049627673",
      "pull_request_review_id": 2776894653,
      "id": 2049627673,
      "node_id": "PRRC_kwDOAN28mc56KtYZ",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As this has been requested by different people, i have added more information regarding compatibility. As @Sjors also pointed out earlier, what we are concerned about here is miners producing blocks that are valid according to these new rules. I have therefore added a new \"Miner forward compatibility\" section which gives more details about this topic. Let me know what you think.\r\n\r\nhttps://github.com/bitcoin/bips/blob/24f0707cd639d6ec28b0f9e1a407daae8ac8fdda/bip-0054.md?plain=1#L132-L148",
      "created_at": "2025-04-17T20:48:34Z",
      "updated_at": "2025-04-17T20:48:35Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2049627673",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2049627673"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2049764030",
      "pull_request_review_id": 2777137667,
      "id": 2049764030,
      "node_id": "PRRC_kwDOAN28mc56LOq-",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "LGTM",
      "created_at": "2025-04-17T23:49:51Z",
      "updated_at": "2025-04-17T23:49:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2049764030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2049764030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050239044",
      "pull_request_review_id": 2777909283,
      "id": 2050239044,
      "node_id": "PRRC_kwDOAN28mc56NCpE",
      "diff_hunk": "@@ -0,0 +1,207 @@\n+```\n+  BIP: ?\n+  Layer: Consensus (soft fork)\n+  Title: Consensus Cleanup\n+  Author: Antoine Poinsot <mail@antoinep.com>\n+          Matt Corallo <bips@bluematt.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: ?\n+  License: CC0-1.0\n+```\n+\n+## Abstract\n+\n+This document proposes new consensus rules in order to fix the timewarp attack, reduce the worst\n+case block validation time, prevent Merkle tree weaknesses and avoid duplicate transactions without\n+[bip-0030][BIP30] validation.\n+\n+## Motivation\n+\n+This proposal addresses a number of long-standing vulnerabilities and weaknesses in the Bitcoin\n+protocol. Bundling these fixes together allows to overcome the fixed cost of deploying a Bitcoin\n+soft fork.\n+\n+The timewarp bug permits a majority hashrate attacker to arbitrarily increase the block rate,\n+allowing them to steal block subsidy from future miners, and increase validation costs to nodes that\n+have to deal with the increased average transaction rate. By strategically setting the block\n+timestamp, the timewarp bug lets miners bring down the difficulty to its minimum within 38 days of\n+starting the attack. The existence of this bug not only significantly empowers a 51% attacker, but\n+also makes it notably harder to reason about miners' incentives. It could indeed be in the interest\n+of short-sighted miners as well as short-sighted users to exploit this vulnerability in a small\n+enough proportion to increase the block rate without fatally hurting the network, as the effectively\n+increased block space would - all others things equal - bring fee rates down for users.\n+\n+Specially crafted blocks may be expensive to process, with validation times ranging from a few\n+minutes up to more than an hour on lower-end devices. Long block validation times are a nuisance to\n+users, increasing the cost to independently fully validate the consensus rules. In addition they can\n+be used by miners to attack their competition, creating perverse incentives, centralization\n+pressures and leading to reduced network security.\n+\n+In computing a block's Merkle root, a 64-byte transaction can be interpreted as an intermediate\n+node in the tree in addition to a leaf. This makes it possible to fake inclusion proofs by\n+pretending a 64-byte block transaction is an inner node, as well as to pretend the inner nodes on\n+one level of the tree are the actual block transactions.\n+\n+Since [bip-0034][BIP34] activation, explicit [bip-0030][BIP30] validation is not necessary until\n+block height 1,983,702[^0].  Mandating new coinbase transactions be different from the early\n+[bip-0034][BIP34] violations makes it possible to get rid of [bip-0030][BIP30] validation forever.\n+Besides its unnecessary cost, another downside of [bip-0030][BIP30] validation is that it cannot be\n+performed by Utreexo clients. Finally, leveraging the coinbase transaction's `nLockTime` field\n+allows applications to recover the block height corresponding to a coinbase transaction without\n+having to parse Script.\n+\n+## Specification\n+\n+For all blocks after activation the following new rules apply.\n+\n+Given a block at height `N`:\n+- if `N % 2016` is equal to 0 the timestamp of the block must be set to a value higher than or\n+  equal to the value of the timestamp of block at height `N-1` minus 7200;\n+- if `N % 2016` is equal to 2015 the timestamp of the block must be set to a value higher than\n+  or equal to the value of the timestamp of block at height `N-2015`.\n+\n+A limit is set on the number of potentially executed signature operations in validating a\n+transaction. It applies to all transactions in the block except the coinbase transaction[^1]. For\n+each input in the transaction, count the number of `CHECKSIG` and `CHECKMULTISIG` in the input\n+scriptSig and previous output's scriptPubKey, including the P2SH redeemScript. The accounting is the\n+same as for [bip-0016][BIP16 specs]: a `CHECKSIG`/`CHECKSIGVERIFY` operation accounts for 1 and a\n+`CHECKMULTISIG`/`CHECKMULTISIGVERIFY` accounts for the number of public keys associated, or 20 if\n+the number of public keys is greater than 16. A `CHECKMULTISIG`/`CHECKMULTISIGVERIFY` not directly\n+preceded by a minimally-pushed number between 1 and 16 (included) accounts for 20. If the\n+total is strictly higher than 2500, the transaction is invalid.\n+\n+Transactions whose witness-stripped serialized size is exactly 64 bytes are made invalid.\n+\n+The coinbase transaction's `nLockTime` field must be set to the height of the block minus 1[^2]\n+and its `nSequence` field must not be equal to 0xffffffff.\n+\n+## Rationale\n+\n+The restrictions on the timestamp of the first and last blocks of a difficulty adjustment period fix\n+the timewarp and Murch–Zawy vulnerabilities[^3]. The latter poses mostly theoretical concerns but is\n+extremely low risk to fix: the duration of an adjustment period has never been, and should never be,\n+negative. The former is fixed by preventing the timestamp of the first block of a difficulty period\n+from being lower than the previous block's, with a two-hour grace period. A [previous\n+proposal][BIP-XXXX] to fix timewarp used a ten-minute grace period instead, also adopted for\n+[testnet4][BIP94 timewarp]. Out of an abundance of caution and because it only trivially worsens the\n+block rate increase under attack, a two-hour grace period is used here[^4].\n+\n+Disabling some Script operations and functionalities was [previously proposed][BIP-XXXX] to reduce\n+the worst case block validation time but was met with resistance due to confiscation concerns[^5]. A\n+delicate balance needs to be struck between minimizing the confiscation risks of a mitigation, even\n+if merely theoretical, and bounding the costs one could impose on all other users of the system. To\n+this effect a limit on the number of potentially executed signature operations pinpoints exactly the\n+harmful behaviour, leaving maximum flexibility in how Script functionalities may have been used.\n+Such a limit reduces the worst case block validation time by a factor of 40 and drastically\n+increases the preparation cost of an attack to make it uneconomical for a miner[^6]. The 2500\n+value was chosen as the tightest value that did not make any non-pathological standard transaction\n+invalid[^7].\n+\n+In the presence of 64-byte transactions a block header's Merkle root may be valid for different\n+sets of transactions. This is because in the Merkle tree construction a 64-byte transaction may be\n+interpreted as the catenation of two 32-byte hashes, or the catenation of two 32-byte hashes may\n+be interpreted as a transaction. The former allows to fake a block inclusion proof and the latter\n+makes it such that for a valid block the Merkle root in the block header is not a unique identifier\n+for the corresponding list of valid transactions[^8]. 64-byte transactions can only contain an\n+output script that lets anyone spend the funds, or burns them.  They have also been non-standard for\n+6 years at the time this is written. It was suggested the known vulnerabilities could instead be\n+mitigated by committing to the Merkle tree depth in the header's version field[^9]. The authors\n+believe it is preferable to address the root cause by invalidating 64-byte transactions. This\n+approach also fixes the vulnerability without developers of SPV verifiers having to implement the\n+mitigation or to know it is necessary in the first place.\n+\n+Several blocks prior to [bip-0034][BIP34] activation contain a coinbase transaction whose scriptSig\n+contains a valid [bip-0034][BIP34] commitment to a future block height. This offers an opportunity\n+to duplicate these coinbase transactions in the future[^10] and for this reason [bip-0030][BIP30]\n+validation will need to be re-activated from block 1,983,702. A simple way to prevent this is to\n+mandate that future coinbase transactions vary slightly from coinbase transactions before\n+[bip-0034][BIP34] activation. There are multiple ways of achieving this, but enforcing the timelock\n+for the coinbase transaction makes it so all coinbase transactions past Consensus Cleanup activation\n+could not have been valid before this height and therefore cannot be a duplicate[^11].\n+\n+## Backward compatibility\n+\n+This proposal only tightens the block validation rules: there is no block that is valid under the\n+rules proposed in this BIP but not under the existing Bitcoin consensus rules. As a consequence\n+these changes are backward-compatible with unupgraded node software. That said, the authors strongly\n+encourage node operators to upgrade in order to fully validate all consensus rules.",
      "path": "bip-cc.md",
      "position": null,
      "original_position": 130,
      "commit_id": "24f0707cd639d6ec28b0f9e1a407daae8ac8fdda",
      "original_commit_id": "21a9cd52a0e49dd545153c16b5b7121cb825cef9",
      "in_reply_to_id": 2029038611,
      "user": {
        "login": "Sjors",
        "id": 10217,
        "node_id": "MDQ6VXNlcjEwMjE3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Sjors",
        "html_url": "https://github.com/Sjors",
        "followers_url": "https://api.github.com/users/Sjors/followers",
        "following_url": "https://api.github.com/users/Sjors/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Sjors/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Sjors/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
        "organizations_url": "https://api.github.com/users/Sjors/orgs",
        "repos_url": "https://api.github.com/users/Sjors/repos",
        "events_url": "https://api.github.com/users/Sjors/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Sjors/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Link to what I wrote above: https://github.com/bitcoin/bips/pull/1800#discussion_r2016143661\r\n\r\nOnly bit that's missing, maybe to add in the timewarp section, is that they must ensure the `mintime` field of getblocktemplate is honoured, or use `curtime` without modification. Although it's true they should do that already, in the past 10 years afaik they would never have produced an invalid block when using pool machine clock time. Having increased the grace period from 10 minutes to two hours also makes it extremely unlikely to run into this.\r\n\r\nBut if miners are looking at their coinbase generation code anyway, they should check this.",
      "created_at": "2025-04-18T07:24:43Z",
      "updated_at": "2025-04-18T07:25:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1800#discussion_r2050239044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2050239044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1800"
        }
      },
      "start_line": null,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 130,
      "side": "RIGHT"
    }
  ]
}