{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1324",
    "id": 938968938,
    "node_id": "PR_kwDOAN28mc4394dq",
    "html_url": "https://github.com/bitcoin/bips/pull/1324",
    "diff_url": "https://github.com/bitcoin/bips/pull/1324.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1324.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1324/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/9a85feff61297483ee50ccd9a4af07545742dc23",
    "number": 1324,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Package Relay and child-with-unconfirmed-parents + tx-with-unconfirmed-ancestors Packages",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please leave concept/approach feedback on the [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020493.html) so that people can follow the discussion in one place. Feel free to leave a review comment if you find typos or incorrect wording.",
    "labels": [],
    "created_at": "2022-05-17T15:26:17Z",
    "updated_at": "2022-10-13T21:37:09Z",
    "closed_at": "2022-10-13T21:37:08Z",
    "mergeable_state": "unknown",
    "merge_commit_sha": "ebdaf338d793bbcbe307f57df403ffd20a178189",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "glozow:2022-04-package-relay",
      "ref": "2022-04-package-relay",
      "sha": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 481603389,
        "node_id": "R_kgDOHLSvPQ",
        "name": "bips",
        "full_name": "glozow/bips",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bips",
        "archive_url": "https://api.github.com/repos/glozow/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bips/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bips/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bips/downloads",
        "events_url": "https://api.github.com/repos/glozow/bips/events",
        "forks_url": "https://api.github.com/repos/glozow/bips/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bips.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bips/languages",
        "merges_url": "https://api.github.com/repos/glozow/bips/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bips.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bips/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bips/tags",
        "teams_url": "https://api.github.com/repos/glozow/bips/teams",
        "trees_url": "https://api.github.com/repos/glozow/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bips.git",
        "hooks_url": "https://api.github.com/repos/glozow/bips/hooks",
        "svn_url": "https://github.com/glozow/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 1,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 15250,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-07-04T10:48:18Z",
        "created_at": "2022-04-14T12:52:36Z",
        "updated_at": "2023-06-12T10:57:22Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "df443f8db30862b4776b4c06c47b62ded0790dc5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 719,
    "deletions": 0,
    "changed_files": 19,
    "commits": 3,
    "review_comments": 24,
    "comments": 7
  },
  "events": [
    {
      "event": "reviewed",
      "id": 975794395,
      "node_id": "PRR_kwDOAN28mc46KXDb",
      "url": null,
      "actor": null,
      "commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for working on this!  Just some initial questions to try to make sure I'm understanding this proposal right (will do my best to save broader feedback for the mailing list!).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#pullrequestreview-975794395",
      "submitted_at": "2022-05-17T16:57:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6626942915,
      "node_id": "HRFPE_lADOAN28mc5J1spezwAAAAGK_x_D",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6626942915",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T19:06:54Z"
    },
    {
      "event": "commented",
      "id": 1129307342,
      "node_id": "IC_kwDOAN28mc5DT9zO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1129307342",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T20:53:39Z",
      "updated_at": "2022-05-17T20:54:50Z",
      "author_association": "MEMBER",
      "body": "Based on email discussion, I'd request that the spec makes it explicit that you do not request packages from peers when they report a different chaintip blockhash(and disconnect them right after...)\r\n\r\nit's possible I missed it, but I keep looking and not seeing it",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1129307342",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "commented",
      "id": 1129313365,
      "node_id": "IC_kwDOAN28mc5DT_RV",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1129313365",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T21:01:12Z",
      "updated_at": "2022-05-17T21:01:12Z",
      "author_association": "MEMBER",
      "body": "> Based on email discussion, I'd request that the spec makes it explicit that you do not request packages from peers when they report a different chaintip blockhash(and disconnect them right after...)\r\n\r\nThanks @instagibbs I will add this. Also, if a peer sends us a \"pckginfo1\" with a blockhash that's different from ours, we should probably just drop it and re-request when they catch up (I think nowadays we usually have an accurate idea of what our peer's best block is). We're definitely not going to disconnect a peer for sending a \"pckginfo1\" with a different blockhash from ours.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1129313365",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "mentioned",
      "id": 6627570797,
      "node_id": "MEE_lADOAN28mc5J1spezwAAAAGLCLRt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6627570797",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T21:01:13Z"
    },
    {
      "event": "subscribed",
      "id": 6627570801,
      "node_id": "SE_lADOAN28mc5J1spezwAAAAGLCLRx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6627570801",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T21:01:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6627719175,
      "node_id": "HRFPE_lADOAN28mc5J1spezwAAAAGLCvgH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6627719175",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-17T21:31:56Z"
    },
    {
      "event": "reviewed",
      "id": 978495954,
      "node_id": "PRR_kwDOAN28mc46UqnS",
      "url": null,
      "actor": null,
      "commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "First read through. Looks great thus far. Just some nits (feel free to ignore).\r\n\r\nI know this hasn't been done in the past but in the spirit of trying to make BIPs more understandable (and precise when it comes to references to particular attacks) I wonder if a glossary of terms (e.g. pinning attacks and the different varieties of such attacks) could be a good idea (maybe footnotes rather than a glossary, they have been used in the past). I guess the top priority is to clearly go into what attacks/vulns package relay addresses (including on higher layers), what attacks/vulns package relay potentially opens up on the base layer with their introduction and how the design of package relay has minimized the scope of those attacks/vulns on the base layer. My gut feel is that the current draft is still a little light on these details but it was just a first readthrough and it clearly doesn't ignore them.\r\n\r\nedit: Was looking at the [BIP118 draft](https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki) for inspiration on what a BIP should cover that is primarily targeted towards higher layer use cases (but with base layer implications). That has a [Security section](https://github.com/bitcoin/bips/blob/master/bip-0118.mediawiki#security) which may be a good idea for this BIP.",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#pullrequestreview-978495954",
      "submitted_at": "2022-05-19T13:19:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6653968095,
      "node_id": "HRFPE_lADOAN28mc5J1spezwAAAAGMm37f",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6653968095",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T22:55:34Z"
    },
    {
      "event": "renamed",
      "id": 6653969226,
      "node_id": "RTE_lADOAN28mc5J1spezwAAAAGMm4NK",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6653969226",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T22:56:08Z",
      "rename": {
        "from": "Package Relay and child-with-unconfirmed-parents Packages",
        "to": "Package Relay and child-with-unconfirmed-parents + tx-with-unconfirmed-ancestors Packages"
      }
    },
    {
      "event": "commented",
      "id": 1133447353,
      "node_id": "IC_kwDOAN28mc5Djwi5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1133447353",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T22:57:09Z",
      "updated_at": "2022-05-20T22:57:09Z",
      "author_association": "MEMBER",
      "body": "Added tx-with-unconfirmed-ancestors packages as a second type of package dedicated to orphan-fetching.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1133447353",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6671454126,
      "node_id": "HRFPE_lADOAN28mc5J1spezwAAAAGNpk-u",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6671454126",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:24:52Z"
    },
    {
      "event": "commented",
      "id": 1136297376,
      "node_id": "IC_kwDOAN28mc5DuoWg",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1136297376",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:28:54Z",
      "updated_at": "2022-05-24T18:28:54Z",
      "author_association": "MEMBER",
      "body": "Last push (thanks @ajtowns)\r\n\r\n- Count and size are implied by the version. Version 1 and Version 2 both have maximum of 25 transactions and 404KWu.\r\n- Announce sendpackages based on our own state. It’s ok to send “sendpackages” if they sent fRelay=false.\r\n- At verack, require fRelay=true and wtxidrelay if they sent sendpackages, otherwise disconnect.\r\n- If we get “getpckgtxns” or “pckgtxns” without having negotiated “sendpackages” ahead of time, ignore, don’t disconnect. Emphasize that the intention is to validate all of the transactions received through “pckgtxns” together.\r\n\r\nThanks for the feedback @michaelfolkson, I'll get to the style/wording comments later when the design is more finalized.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1136297376",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "mentioned",
      "id": 6671478626,
      "node_id": "MEE_lADOAN28mc5J1spezwAAAAGNpq9i",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6671478626",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:28:54Z"
    },
    {
      "event": "subscribed",
      "id": 6671478633,
      "node_id": "SE_lADOAN28mc5J1spezwAAAAGNpq9p",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6671478633",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:28:54Z"
    },
    {
      "event": "mentioned",
      "id": 6671478640,
      "node_id": "MEE_lADOAN28mc5J1spezwAAAAGNpq9w",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6671478640",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:28:54Z"
    },
    {
      "event": "subscribed",
      "id": 6671478647,
      "node_id": "SE_lADOAN28mc5J1spezwAAAAGNpq93",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6671478647",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-24T18:28:54Z"
    },
    {
      "event": "commented",
      "id": 1137621093,
      "node_id": "IC_kwDOAN28mc5Dzrhl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1137621093",
      "actor": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-25T17:38:40Z",
      "updated_at": "2022-05-25T17:38:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Sorry for also leaving a style nit, but as someone also mentioned on the mailing list, `pkg` is a much more common abbreviation than `pckg` (it's even mentioned on Wikipedia: https://en.wikipedia.org/wiki/PKG), so it might be nice to consider switching to that.",
      "user": {
        "login": "flack",
        "id": 425166,
        "node_id": "MDQ6VXNlcjQyNTE2Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/425166?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/flack",
        "html_url": "https://github.com/flack",
        "followers_url": "https://api.github.com/users/flack/followers",
        "following_url": "https://api.github.com/users/flack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/flack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/flack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/flack/subscriptions",
        "organizations_url": "https://api.github.com/users/flack/orgs",
        "repos_url": "https://api.github.com/users/flack/repos",
        "events_url": "https://api.github.com/users/flack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/flack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1137621093",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA5Y2ZkNmVhZTIwMDFiNzhlYjg1NzI1M2RmMmQ3Mzc3Y2JiOThmNDQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/09cfd6eae2001b78eb857253df2d7377cbb98f44",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/09cfd6eae2001b78eb857253df2d7377cbb98f44",
      "tree": {
        "sha": "771bfa40c0294eca0368091305addb326be66a1f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/771bfa40c0294eca0368091305addb326be66a1f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/df443f8db30862b4776b4c06c47b62ded0790dc5",
          "sha": "df443f8db30862b4776b4c06c47b62ded0790dc5",
          "html_url": "https://github.com/bitcoin/bips/commit/df443f8db30862b4776b4c06c47b62ded0790dc5"
        }
      ],
      "message": "specify generic package relay",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-06-07T17:35:14Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-05-11T19:53:37Z"
      },
      "sha": "09cfd6eae2001b78eb857253df2d7377cbb98f44"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJjNTNjZGRiYzE4MWZmMTU5ODNhMzhjMDllNDJmMTMyZmY5NTg3YTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2c53cddbc181ff15983a38c09e42f132ff9587a0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2c53cddbc181ff15983a38c09e42f132ff9587a0",
      "tree": {
        "sha": "870a517f2b4ad37580c5f8f05224572164feeea6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/870a517f2b4ad37580c5f8f05224572164feeea6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/09cfd6eae2001b78eb857253df2d7377cbb98f44",
          "sha": "09cfd6eae2001b78eb857253df2d7377cbb98f44",
          "html_url": "https://github.com/bitcoin/bips/commit/09cfd6eae2001b78eb857253df2d7377cbb98f44"
        }
      ],
      "message": "specify version 1 child-with-unconfirmed-parents package relay",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-06-07T17:41:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-05-20T19:49:30Z"
      },
      "sha": "2c53cddbc181ff15983a38c09e42f132ff9587a0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDlhODVmZWZmNjEyOTc0ODNlZTUwY2NkOWE0YWYwNzU0NTc0MmRjMjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9a85feff61297483ee50ccd9a4af07545742dc23",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9a85feff61297483ee50ccd9a4af07545742dc23",
      "tree": {
        "sha": "a1a9008d6486e829db8be2576f1aef2868e996b0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a1a9008d6486e829db8be2576f1aef2868e996b0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2c53cddbc181ff15983a38c09e42f132ff9587a0",
          "sha": "2c53cddbc181ff15983a38c09e42f132ff9587a0",
          "html_url": "https://github.com/bitcoin/bips/commit/2c53cddbc181ff15983a38c09e42f132ff9587a0"
        }
      ],
      "message": "specify version 2 transaction-with-unconfirmed-ancestors package relay",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-06-07T17:41:41Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-05-20T19:50:38Z"
      },
      "sha": "9a85feff61297483ee50ccd9a4af07545742dc23"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6763486855,
      "node_id": "HRFPE_lADOAN28mc5J1spezwAAAAGTIp6H",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/6763486855",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-07T17:41:54Z"
    },
    {
      "event": "commented",
      "id": 1148985539,
      "node_id": "IC_kwDOAN28mc5EfCDD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1148985539",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-07T17:47:37Z",
      "updated_at": "2022-06-07T17:47:37Z",
      "author_association": "MEMBER",
      "body": "Last push:\r\n\r\n- Renamed s/pckg/pkg everywhere, updated diagrams\r\n- Removed fee and weight information from `pkginfo1`",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1148985539",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "reviewed",
      "id": 1000083480,
      "node_id": "PRR_kwDOAN28mc47nBAY",
      "url": null,
      "actor": null,
      "commit_id": "2c53cddbc181ff15983a38c09e42f132ff9587a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#pullrequestreview-1000083480",
      "submitted_at": "2022-06-08T16:31:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
    },
    {
      "event": "reviewed",
      "id": 1050098201,
      "node_id": "PRR_kwDOAN28mc4-lzoZ",
      "url": null,
      "actor": null,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#pullrequestreview-1050098201",
      "submitted_at": "2022-07-25T21:33:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
    },
    {
      "event": "commented",
      "id": 1278204866,
      "node_id": "IC_kwDOAN28mc5ML9vC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1278204866",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-13T21:37:08Z",
      "updated_at": "2022-10-13T21:37:08Z",
      "author_association": "MEMBER",
      "body": "Closing as the updated proposal is going to be significantly different from this one, which has no number assigned, and I think it would be confusing.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1324#issuecomment-1278204866",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1324"
    },
    {
      "event": "closed",
      "id": 7585264444,
      "node_id": "CE_lADOAN28mc5J1spezwAAAAHEHfM8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/7585264444",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-13T21:37:08Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-13T21:40:08Z",
      "updated_at": "2022-10-13T21:40:08Z",
      "source": {
        "issue": {
          "id": 1408457574,
          "node_id": "PR_kwDOAN28mc5AxVQs",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1382",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1382/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1382/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1382/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1382",
          "number": 1382,
          "state": "open",
          "state_reason": null,
          "title": "BIP 331: Ancestor Package Relay",
          "body": "ML thread: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-May/020493.html\r\n\r\nSupersedes #1324.",
          "user": {
            "login": "glozow",
            "id": 25183001,
            "node_id": "MDQ6VXNlcjI1MTgzMDAx",
            "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/glozow",
            "html_url": "https://github.com/glozow",
            "followers_url": "https://api.github.com/users/glozow/followers",
            "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
            "organizations_url": "https://api.github.com/users/glozow/orgs",
            "repos_url": "https://api.github.com/users/glozow/repos",
            "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/glozow/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 22,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1382",
            "html_url": "https://github.com/bitcoin/bips/pull/1382",
            "diff_url": "https://github.com/bitcoin/bips/pull/1382.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1382.patch"
          },
          "created_at": "2022-10-13T21:40:08Z",
          "updated_at": "2023-08-02T02:41:12Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "chinggg",
        "id": 24590067,
        "node_id": "MDQ6VXNlcjI0NTkwMDY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chinggg",
        "html_url": "https://github.com/chinggg",
        "followers_url": "https://api.github.com/users/chinggg/followers",
        "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
        "organizations_url": "https://api.github.com/users/chinggg/orgs",
        "repos_url": "https://api.github.com/users/chinggg/repos",
        "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chinggg/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T07:33:13Z",
      "updated_at": "2022-12-06T07:33:13Z",
      "source": {
        "issue": {
          "id": 1328304534,
          "node_id": "PR_kwDOABII5848ogiO",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25778/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/25778",
          "number": 25778,
          "state": "closed",
          "state_reason": null,
          "title": "fuzz: Modify tx_pool_standard target to test package processing",
          "body": "This draft PR can test package processing by creating package (vector of tx with ordered parents-childs relationship) instead of single tx in tx_pool_standard fuzz target.\r\n\r\nhttps://github.com/MarcoFalke/bitcoin-core/pull/78 has provided a draft for structural change, I only need to modify the anonymous function to create package. The basic idea is similar to https://github.com/bitcoin/bitcoin/blob/194f6dc43ccc330a8a4607be3a2b8935490d6db0/src/test/fuzz/txorphan.cpp#L51-L80, where we create tx from initial outpoints, then keep adding outs of newly constructed tx to outpoints in the loop. Since we want a package here, all new txs will be stored in a vector. The package should be valid since we don't have any orphan tx with dangling input, though we can consume a bool from `fuzz_data_provider` to invalidate the package order by swapping some txs.",
          "user": {
            "login": "chinggg",
            "id": 24590067,
            "node_id": "MDQ6VXNlcjI0NTkwMDY3",
            "avatar_url": "https://avatars.githubusercontent.com/u/24590067?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/chinggg",
            "html_url": "https://github.com/chinggg",
            "followers_url": "https://api.github.com/users/chinggg/followers",
            "following_url": "https://api.github.com/users/chinggg/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/chinggg/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/chinggg/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/chinggg/subscriptions",
            "organizations_url": "https://api.github.com/users/chinggg/orgs",
            "repos_url": "https://api.github.com/users/chinggg/repos",
            "events_url": "https://api.github.com/users/chinggg/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/chinggg/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 62963516,
              "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
              "name": "Tests",
              "color": "d4c5f9",
              "default": false
            },
            {
              "id": 955867938,
              "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
              "name": "Needs rebase",
              "description": "",
              "color": "cccccc",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 10,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25778",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/25778",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/25778.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/25778.patch"
          },
          "closed_at": "2023-07-10T06:39:23Z",
          "created_at": "2022-08-04T09:05:55Z",
          "updated_at": "2023-07-13T10:12:33Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875042469",
      "pull_request_review_id": 975794395,
      "id": 875042469,
      "node_id": "PRRC_kwDOAN28mc40KBal",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Parent Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.\n+\n+A '''child-with-unconfirmed-parents''' package MUST be:\n+\n+# '''Sorted topologically.''' For every transaction t in the package, if any of t's parents are present in the package, the parent must appear somewhere in the list before t. In other words, the transactions must be sorted in ascending order of number of ancestors present in the package.\n+\n+# '''Only 1 child with unconfirmed parents.''' The package must consist of one transaction and its unconfirmed parents. There must not be any other transactions in the package. Other dependency relationships may exist within the package (e.g. one parent may spend the output of another parent) provided that topological order is respected.",
      "path": "bip-v1-packages.mediawiki",
      "position": 180,
      "original_position": 163,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "One thing I overlooked when I first read this over -- by \"unconfirmed parents\" you mean direct parents, ie transactions which contain an outpoint being spent in the child transaction, is that right?  (I was trying to figure out exactly what you meant by the 2-generation limit further down, and then I realized I might have misunderstood the language here.)\r\n\r\nI'd suggest defining this language more explicitly somehow, since I think \"unconfirmed parent\" can read a lot like \"unconfirmed ancestor\" (and at any rate I don't think these words have meanings well defined across the developer community).\r\n\r\nAlso, if a `GETDATA(PCKG1, wtxid)` comes in for a transaction that has unconfirmed ancestors outside the set of unconfirmed direct parents, how is software supposed to respond?",
      "created_at": "2022-05-17T16:40:56Z",
      "updated_at": "2022-05-17T16:57:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875042469",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875042469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875045628",
      "pull_request_review_id": 975794395,
      "id": 875045628,
      "node_id": "PRRC_kwDOAN28mc40KCL8",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Parent Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.\n+\n+A '''child-with-unconfirmed-parents''' package MUST be:\n+\n+# '''Sorted topologically.''' For every transaction t in the package, if any of t's parents are present in the package, the parent must appear somewhere in the list before t. In other words, the transactions must be sorted in ascending order of number of ancestors present in the package.\n+\n+# '''Only 1 child with unconfirmed parents.''' The package must consist of one transaction and its unconfirmed parents. There must not be any other transactions in the package. Other dependency relationships may exist within the package (e.g. one parent may spend the output of another parent) provided that topological order is respected.\n+\n+# '''All unconfirmed parents.''' All of the child's unconfirmed parents must be present.\n+\n+# '''No conflicts.''' None of the transactions in the package may conflict with each other (i.e. spend the same prevout).\n+\n+# '''Total fees and weight.''' The 'total_fee' and 'total_weight' fields must accurately represent the sum total of all transactions' fees and weights as defined in BIP141, respectively.\n+\n+Not all of the child's parents must be present; the child transaction may also spend confirmed\n+inputs. However, if the child has confirmed parents, they must not be in the package.\n+\n+While a child-with-unconfirmed-parents package is perhaps most relevant when the child has a higher\n+feerate than its parents, this property is not required to construct a valid package.\n+\n+===Clarifications===\n+\n+'''Q: Under what circumstances should a sender announce a child-with-unconfirmed-parents package?'''\n+\n+A child-with-unconfirmed-parents package for a transaction should be announced when it meets the\n+peer's fee filter but one or more of its parents don't; a \"inv(MSG_PCKG1)\" instead of \"inv(WTX)\"\n+should be sent for the child. Each of the parents which meet the peer's fee filter should still be\n+announced normally.\n+\n+'''Q: What if a new block arrives in between messages?'''\n+\n+A child-with-unconfirmed-parents package is defined for a transaction based on the current chain\n+state. As such, a new block extending the tip may decrease the number of transactions in the package\n+(i.e. if any of the transaction's parents were included in the block). In a reorg, the number of\n+transactions in the package may decrease or increase (i.e. if any of the transaction's parents were\n+included in a block in the previous chain but not the new one).\n+\n+If the new block arrives before the \"getdata\" or \"pckginfo1\", nothing needs to change.\n+\n+[[File:./bip-v1-packages/newblock_benign.png|500px]]\n+\n+''Diagram: Benign \"new block\" scenarios.''\n+\n+If the new block arrives before \"getpckgtxns\" or before \"pckgtxns\", the receiver may need to\n+re-request package information if the block contained a transaction in the package. If the block\n+doesn't contain any transactions in the package, whether it extends the previous tip or causes a\n+reorg, nothing needs to change.\n+\n+[[File:./bip-v1-packages/newblock_rerequest.png|1000px]]\n+\n+''Diagram: \"New block\" scenarios in which additional messages must be sent.''\n+\n+'''Q: Can \"getpckgtxns\" and \"pckgtxns\" messages contain only one transaction?'''\n+\n+Yes.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+===Package Erlay===\n+\n+A client using BIP330 reconciliation-based transaction relay (Erlay) is able to use package relay\n+without interference. In fact, a package of transactions may be announced using both Erlay and\n+package relay.  After reconciliation, if the initiator would have announced a transaction by wtxid\n+but also has package information for it, they may send \"inv(MSG_PCKG)\" instead of \"inv(WTX)\".\n+\n+[[File:./bip-v1-packages/package_erlay.png|900px]]",
      "path": "bip-v1-packages.mediawiki",
      "position": 265,
      "original_position": 225,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the erlay picture, are some of the arrows at the bottom of the image needing to be reversed?",
      "created_at": "2022-05-17T16:44:33Z",
      "updated_at": "2022-05-17T16:57:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875045628",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875045628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 265,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875046194",
      "pull_request_review_id": 975794395,
      "id": 875046194,
      "node_id": "PRRC_kwDOAN28mc40KCUy",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The reciever uses the package information to decide how to request and validate the transactions.",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"receiver\" (here and at line 59)",
      "created_at": "2022-05-17T16:45:09Z",
      "updated_at": "2022-05-17T16:57:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875046194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875046194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875053300",
      "pull_request_review_id": 975794395,
      "id": 875053300,
      "node_id": "PRRC_kwDOAN28mc40KED0",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.",
      "path": "bip-v1-packages.mediawiki",
      "position": null,
      "original_position": 137,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Requested by recipient means a GETDATA(MSG_PCKG1) was sent?  If so I'd suggest making that more explicit.  \r\n\r\nAlso, I think usually we have left the handling of protocol violations as not themselves mandating particular handling, ie, I'd suggest that the spec be \"Upon receipt of an unsolicited pckginfo1, a node MAY disconnect the sender\".",
      "created_at": "2022-05-17T16:53:04Z",
      "updated_at": "2022-05-17T16:57:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875053300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875053300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875054049",
      "pull_request_review_id": 975794395,
      "id": 875054049,
      "node_id": "PRRC_kwDOAN28mc40KEPh",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.",
      "path": "bip-v1-packages.mediawiki",
      "position": 158,
      "original_position": 145,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does using MSG_PCKG1 as an inv-type imply that the transaction's unconfirmed ancestors are exactly equal to its unconfirmed parents?  (See my other questions below)",
      "created_at": "2022-05-17T16:53:57Z",
      "updated_at": "2022-05-17T16:57:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875054049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875054049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 158,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875054925",
      "pull_request_review_id": 975794395,
      "id": 875054925,
      "node_id": "PRRC_kwDOAN28mc40KEdN",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.",
      "path": "bip-v1-packages.mediawiki",
      "position": null,
      "original_position": 147,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it permitted to send a GETDATA(MSG_PCKG1, wtxid) if the peer didn't send an INV(MSG_PCKG1, wtxid)?  Ie could software use this message to reconstruct the parents of an orphan transaction? ",
      "created_at": "2022-05-17T16:54:52Z",
      "updated_at": "2022-05-17T16:57:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875054925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875054925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875110316",
      "pull_request_review_id": 975888142,
      "id": 875110316,
      "node_id": "PRRC_kwDOAN28mc40KR-s",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Parent Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.\n+\n+A '''child-with-unconfirmed-parents''' package MUST be:\n+\n+# '''Sorted topologically.''' For every transaction t in the package, if any of t's parents are present in the package, the parent must appear somewhere in the list before t. In other words, the transactions must be sorted in ascending order of number of ancestors present in the package.\n+\n+# '''Only 1 child with unconfirmed parents.''' The package must consist of one transaction and its unconfirmed parents. There must not be any other transactions in the package. Other dependency relationships may exist within the package (e.g. one parent may spend the output of another parent) provided that topological order is respected.",
      "path": "bip-v1-packages.mediawiki",
      "position": 180,
      "original_position": 163,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": 875042469,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> by \"unconfirmed parents\" you mean direct parents, ie transactions which contain an outpoint being spent in the child transaction, is that right?\r\n\r\nYes, exactly.\r\n\r\n> I'd suggest defining this language more explicitly somehow, since I think \"unconfirmed parent\" can read a lot like \"unconfirmed ancestor\" (and at any rate I don't think these words have meanings well defined across the developer community).\r\n\r\nAh, noted. How about something like this:\r\n\"Given any two transactions Tx0 and Tx1 where Tx1 spends an output of Tx0, Tx0 is a parent of Tx1 and Tx1 is a child of Tx0. A transaction's ancestors include, recursively, its parents, the parents of its parents, etc. A transaction's descendants include, recursively, its children, the children of its children, etc.\"\r\n\r\n> Also, if a GETDATA(PCKG1, wtxid) comes in for a transaction that has unconfirmed ancestors outside the set of unconfirmed direct parents, how is software supposed to respond?\r\n\r\nIt should send only the direct parents, and no other ancestors.",
      "created_at": "2022-05-17T17:58:39Z",
      "updated_at": "2022-05-17T17:58:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875110316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875110316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875227857",
      "pull_request_review_id": 976045211,
      "id": 875227857,
      "node_id": "PRRC_kwDOAN28mc40KurR",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.",
      "path": "bip-v1-packages.mediawiki",
      "position": null,
      "original_position": 147,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": 875054925,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes absolutely! This kind of \"half solves\" the orphan fetching use case if there's only direct parents missing, but I actually think it would make sense to create another type of package for tx-with-unconfirmed-ancestors:\r\n\r\n<img width=\"954\" alt=\"image\" src=\"https://user-images.githubusercontent.com/25183001/168891185-1630f583-de47-4937-86b1-2652cf8852f2.png\">\r\n\r\nTo answer the likely question of \"why wasn't v1 packages tx-with-unconfirmed-ancestors?\" I have two primary reasons:\r\n\r\n- The mempool policy created for child-with-unconfirmed-parents packages is insufficient to ensure that a the fees of a tx-with-ancestors package would be evaluated correctly. I noticed you had some [consideration](https://github.com/bitcoin/bitcoin/pull/16401/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R1054-R1056) for that in #16401. Probably the best algorithm is to sort topologically, then submit each transaction with its ancestor subset within the package. But it doesn't seem like anyone is asking for more than 2 generations of fee-bumping, and I haven't really figured out what RBF would look like.\r\n\r\n- It seems like the orphan-processing and fee-bumping use cases can be thought of separately. For instance, fee-bumping should be a sender-initiated \"I'm telling you about extra info you need\" and orphan-fetching is more appropriate as a receiver-initiated \"hey I'm new here, so I don't know the ancestors of this transaction.\"",
      "created_at": "2022-05-17T20:18:39Z",
      "updated_at": "2022-05-17T20:18:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875227857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875227857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875986030",
      "pull_request_review_id": 977094446,
      "id": 875986030,
      "node_id": "PRRC_kwDOAN28mc40Nnxu",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.\n+\n+# A \"pckginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pckginfo1\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====MSG_PCKG1====\n+\n+# A new inv type (MSG_PCKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PCKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Parent Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.\n+\n+A '''child-with-unconfirmed-parents''' package MUST be:\n+\n+# '''Sorted topologically.''' For every transaction t in the package, if any of t's parents are present in the package, the parent must appear somewhere in the list before t. In other words, the transactions must be sorted in ascending order of number of ancestors present in the package.\n+\n+# '''Only 1 child with unconfirmed parents.''' The package must consist of one transaction and its unconfirmed parents. There must not be any other transactions in the package. Other dependency relationships may exist within the package (e.g. one parent may spend the output of another parent) provided that topological order is respected.\n+\n+# '''All unconfirmed parents.''' All of the child's unconfirmed parents must be present.\n+\n+# '''No conflicts.''' None of the transactions in the package may conflict with each other (i.e. spend the same prevout).\n+\n+# '''Total fees and weight.''' The 'total_fee' and 'total_weight' fields must accurately represent the sum total of all transactions' fees and weights as defined in BIP141, respectively.\n+\n+Not all of the child's parents must be present; the child transaction may also spend confirmed\n+inputs. However, if the child has confirmed parents, they must not be in the package.\n+\n+While a child-with-unconfirmed-parents package is perhaps most relevant when the child has a higher\n+feerate than its parents, this property is not required to construct a valid package.\n+\n+===Clarifications===\n+\n+'''Q: Under what circumstances should a sender announce a child-with-unconfirmed-parents package?'''\n+\n+A child-with-unconfirmed-parents package for a transaction should be announced when it meets the\n+peer's fee filter but one or more of its parents don't; a \"inv(MSG_PCKG1)\" instead of \"inv(WTX)\"\n+should be sent for the child. Each of the parents which meet the peer's fee filter should still be\n+announced normally.\n+\n+'''Q: What if a new block arrives in between messages?'''\n+\n+A child-with-unconfirmed-parents package is defined for a transaction based on the current chain\n+state. As such, a new block extending the tip may decrease the number of transactions in the package\n+(i.e. if any of the transaction's parents were included in the block). In a reorg, the number of\n+transactions in the package may decrease or increase (i.e. if any of the transaction's parents were\n+included in a block in the previous chain but not the new one).\n+\n+If the new block arrives before the \"getdata\" or \"pckginfo1\", nothing needs to change.\n+\n+[[File:./bip-v1-packages/newblock_benign.png|500px]]\n+\n+''Diagram: Benign \"new block\" scenarios.''\n+\n+If the new block arrives before \"getpckgtxns\" or before \"pckgtxns\", the receiver may need to\n+re-request package information if the block contained a transaction in the package. If the block\n+doesn't contain any transactions in the package, whether it extends the previous tip or causes a\n+reorg, nothing needs to change.\n+\n+[[File:./bip-v1-packages/newblock_rerequest.png|1000px]]\n+\n+''Diagram: \"New block\" scenarios in which additional messages must be sent.''\n+\n+'''Q: Can \"getpckgtxns\" and \"pckgtxns\" messages contain only one transaction?'''\n+\n+Yes.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+===Package Erlay===\n+\n+A client using BIP330 reconciliation-based transaction relay (Erlay) is able to use package relay\n+without interference. In fact, a package of transactions may be announced using both Erlay and\n+package relay.  After reconciliation, if the initiator would have announced a transaction by wtxid\n+but also has package information for it, they may send \"inv(MSG_PCKG)\" instead of \"inv(WTX)\".\n+\n+[[File:./bip-v1-packages/package_erlay.png|900px]]",
      "path": "bip-v1-packages.mediawiki",
      "position": 265,
      "original_position": 225,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": 875045628,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! fixed",
      "created_at": "2022-05-18T14:40:54Z",
      "updated_at": "2022-05-18T14:40:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875986030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875986030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 265,
      "original_line": 265,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875986275",
      "pull_request_review_id": 977094817,
      "id": 875986275,
      "node_id": "PRRC_kwDOAN28mc40Nn1j",
      "diff_hunk": "@@ -0,0 +1,314 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Rebind Update in eltoo[8]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PCKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PCKG1)\".\n+\n+# The sender provides package information using \"pckginfo1\", including the blockhash of the sender's best block, the wtxids of the transactions in the package, their total fees and total weight.\n+\n+# The reciever uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they only request the missing ones. They could also decide not to request the package at all based on the fee information provided.\n+\n+# Upon receiving a \"pckgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, and no transactions need to be relayed.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the \"sendpackages\" message\n+with version=1.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PCKG1\", and new protocol message, \"PCKGINFO1\", are added.\n+\n+====pckginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|pckg_fee||CAmount||4|| The sum total fees paid by all transactions in the package.\n+|-\n+|pckg_weight||int64_t||8|| The sum total weight of all transactions in the package.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pckginfo1\" message has the structure defined above, with pchCommand == \"pckginfo1\".\n+\n+# A \"pckginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pckginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc.\n+\n+# Upon receipt of a malformed \"pckginfo1\" message or package that does not abide by the max_count, max_weight, or other rules specified by the version agreed upon in the initial negotiation, the sender should be disconnected.  If a node receives a \"pckginfo1\" message for which the \"pckg_fee\" or \"pckg_weight\" do not reflect the true total fees and weight, respectively, or the transactions in the package, the message is malformed.\n+\n+# A node MUST NOT send a \"pckginfo1\" message that has not been requested by the recipient. Upon receipt of an unsolicited \"pckginfo1\", a node should disconnect the sender.",
      "path": "bip-v1-packages.mediawiki",
      "position": null,
      "original_position": 137,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "dee1711789f050bc8fd981b9b5a9d50853e4c855",
      "in_reply_to_id": 875053300,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, thanks!",
      "created_at": "2022-05-18T14:41:07Z",
      "updated_at": "2022-05-18T14:41:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r875986275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/875986275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 137,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877002146",
      "pull_request_review_id": 978495954,
      "id": 877002146,
      "node_id": "PRRC_kwDOAN28mc40Rf2i",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.",
      "path": "bip-package-relay.mediawiki",
      "position": 33,
      "original_position": 33,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/how validate/how to validate",
      "created_at": "2022-05-19T12:37:20Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877002146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877002146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877003626",
      "pull_request_review_id": 978495954,
      "id": 877003626,
      "node_id": "PRRC_kwDOAN28mc40RgNq",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====pckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of transactions||variable|| The transactions in the package.\n+|}\n+\n+# The \"pckgtxns\" message has the structure defined above, with pchCommand == \"pckgtxns\".\n+\n+# A \"pckgtxns\" message should contain the transaction data requested using \"getpckgtxns\".\n+\n+# A \"pckgtxns\" message should only be sent to a peer that requested the package using \"getpckgtxns\". If a node receives an unsolicited package, the sender should be disconnected.\n+\n+# A \"pckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"pckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+===Protocol Extensions===\n+\n+When introducing a new type of package, assign it a version number \"n\" and use an additional\n+\"sendpackages\" message during version handshake to negotiate support for it. An additional package\n+information message \"pckginfon\" and inv type \"MSG_PCKGn\" should be defined for the type of package.\n+However, \"getpckgtxns\" and \"pckgtxns\" do not need to be changed.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+==Rationale==\n+\n+===P2P Message Design===\n+\n+These p2p messages are added for communication efficiency and, as such, one should measure\n+alternative solutions based on the resources used to communicate (not necessarily trustworthy)\n+information: We would like to minimize network bandwidth, avoid downloading a transaction more than\n+once, avoid downloading transactions that are eventually rejected, and minimize storage allocated\n+for not-yet-validated transactions.\n+\n+Consider these scenarios specifically transaction relay:\n+\n+Alice (the \"sender\") is relaying transactions to Bob (the \"receiver\").\n+Alice's mempool has a minimum feerate of 1sat/vB and Bob's has a minimum feerate of 3sat/vB.\n+For simplicity, all transactions are 1600Wu in virtual size and 500 bytes in serialized size.\n+Apart from the spending relationships specified, all other inputs are from confirmed UTXOs.\n+\n+# Package {A, B} where A pays 0 satoshis and B pays 8000 satoshis in fees.\n+\n+# Package {C, D} where C pays 0 satoshis and D pays 1200 satoshis in fees.\n+\n+# Package {E, F, G, H, J} that pays 4000, 8000, 0, 2000, and 4000 satoshis in fees, respectively.\n+\n+[[File:./bip-package-relay/tx_scenarios.png|800px]]\n+\n+''Diagram: Transaction scenarios to consider when evaluating alternative designs. Note that the average transaction size is much larger than a SHA256 hash.''\n+\n+====Alternative Designs====\n+\n+'''Package Information Only:''' Just having \"pckginfo\" gives enough information for the receiver to\n+accept the package. Omit the \"getpckgtxns\" and \"pckgtxns\" messages. While this option is a good\n+fallback if batched transaction download fails for some reason, it shouldn't be used as the default\n+because it 'always' requires storage of unvalidated transactions.\n+\n+[[File:./bip-package-relay/package_info_only.png|1200px]]\n+\n+''Diagram: Alternative design where package relay only involves information.''\n+\n+'''No Package Information Round:''' Instead of having a package information round, just use the\n+child's wtxid to refer to the package and always send the entire package together. This would cause\n+nodes to redownload duplicate transactions.\n+\n+[[File:./bip-package-relay/no_package_info.png|900px]]\n+\n+''Diagram: Alternative design where nodes relay package transactions directly.''\n+\n+===Versioning System===\n+\n+Attempting to support arbitrary packages in mempool validation may result in very complex logic, new\n+Denial of Service attack vectors, and policy limitations that could be leveraged to censor\n+transactions (aka \"pinning attacks\"). However, the p2p protocol should be extensible to support\n+multiple types of packages based on future desired use cases. Two \"flavors\" of versioning were\n+considered:\n+\n+# When package mempool acceptance is upgraded to support more types of packages, increment the version number (similar to Erlay). During version handshake, peers negotiate which version of package relay they will use by each sending one \"sendpackages\" message.\n+\n+# When introducing another type of package, assign a version number to it and announce it as an additional supported version (similar to Compact Block Relay). During version handshake, peers send one \"sendpackages\" message for each version supported.\n+\n+The second option was favored because it allows different parameters for different versions.\n+For example, it should be possible to allow \"arbitrary topology but maximum 3-transaction\" package",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 216,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/3-transaction package/3-transaction packages",
      "created_at": "2022-05-19T12:38:53Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877003626",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877003626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877005934",
      "pull_request_review_id": 978495954,
      "id": 877005934,
      "node_id": "PRRC_kwDOAN28mc40Rgxu",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====pckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of transactions||variable|| The transactions in the package.\n+|}\n+\n+# The \"pckgtxns\" message has the structure defined above, with pchCommand == \"pckgtxns\".\n+\n+# A \"pckgtxns\" message should contain the transaction data requested using \"getpckgtxns\".\n+\n+# A \"pckgtxns\" message should only be sent to a peer that requested the package using \"getpckgtxns\". If a node receives an unsolicited package, the sender should be disconnected.\n+\n+# A \"pckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"pckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+===Protocol Extensions===\n+\n+When introducing a new type of package, assign it a version number \"n\" and use an additional\n+\"sendpackages\" message during version handshake to negotiate support for it. An additional package\n+information message \"pckginfon\" and inv type \"MSG_PCKGn\" should be defined for the type of package.\n+However, \"getpckgtxns\" and \"pckgtxns\" do not need to be changed.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+==Rationale==\n+\n+===P2P Message Design===\n+\n+These p2p messages are added for communication efficiency and, as such, one should measure\n+alternative solutions based on the resources used to communicate (not necessarily trustworthy)\n+information: We would like to minimize network bandwidth, avoid downloading a transaction more than\n+once, avoid downloading transactions that are eventually rejected, and minimize storage allocated\n+for not-yet-validated transactions.\n+\n+Consider these scenarios specifically transaction relay:",
      "path": "bip-package-relay.mediawiki",
      "position": 159,
      "original_position": 167,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/specifically transaction relay/specifically for transaction relay",
      "created_at": "2022-05-19T12:41:16Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877005934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877005934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877007377",
      "pull_request_review_id": 978495954,
      "id": 877007377,
      "node_id": "PRRC_kwDOAN28mc40RhIR",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====pckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of transactions||variable|| The transactions in the package.\n+|}\n+\n+# The \"pckgtxns\" message has the structure defined above, with pchCommand == \"pckgtxns\".\n+\n+# A \"pckgtxns\" message should contain the transaction data requested using \"getpckgtxns\".\n+\n+# A \"pckgtxns\" message should only be sent to a peer that requested the package using \"getpckgtxns\". If a node receives an unsolicited package, the sender should be disconnected.\n+\n+# A \"pckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"pckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+===Protocol Extensions===\n+\n+When introducing a new type of package, assign it a version number \"n\" and use an additional\n+\"sendpackages\" message during version handshake to negotiate support for it. An additional package\n+information message \"pckginfon\" and inv type \"MSG_PCKGn\" should be defined for the type of package.\n+However, \"getpckgtxns\" and \"pckgtxns\" do not need to be changed.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+==Rationale==\n+\n+===P2P Message Design===\n+\n+These p2p messages are added for communication efficiency and, as such, one should measure\n+alternative solutions based on the resources used to communicate (not necessarily trustworthy)",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 162,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/not necessarily trustworthy/in the presence of possibly malicious peers",
      "created_at": "2022-05-19T12:42:42Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877007377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877007377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877016420",
      "pull_request_review_id": 978495954,
      "id": 877016420,
      "node_id": "PRRC_kwDOAN28mc40RjVk",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 97,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nits: s/During version handshake/During the version handshake, s/message indicate/ message to indicate",
      "created_at": "2022-05-19T12:51:41Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877016420",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877016420"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 95,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877021514",
      "pull_request_review_id": 978495954,
      "id": 877021514,
      "node_id": "PRRC_kwDOAN28mc40RklK",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is",
      "path": "bip-package-relay.mediawiki",
      "position": 53,
      "original_position": 53,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/no matter what order transactions are received by a node/regardless of the order in which transactions are received by a node",
      "created_at": "2022-05-19T12:56:39Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877021514",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877021514"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 53,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877029711",
      "pull_request_review_id": 978495954,
      "id": 877029711,
      "node_id": "PRRC_kwDOAN28mc40RmlP",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 125,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": null,
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Trying to think if disconnect is the right response here rather than merely ignore and not disconnect. Sending it (when no negotiation has taken place) does seem to suggest at the very least that the P2P logic of the node is faulty which I guess is reason to disconnect.",
      "created_at": "2022-05-19T13:04:40Z",
      "updated_at": "2022-05-19T13:19:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r877029711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/877029711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/880831125",
      "pull_request_review_id": 983684332,
      "id": 880831125,
      "node_id": "PRRC_kwDOAN28mc40gGqV",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 125,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": 877029711,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, this has been changed so the comment no longer applies",
      "created_at": "2022-05-24T18:30:33Z",
      "updated_at": "2022-05-24T18:30:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r880831125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/880831125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/880831518",
      "pull_request_review_id": 983684883,
      "id": 880831518,
      "node_id": "PRRC_kwDOAN28mc40gGwe",
      "diff_hunk": "@@ -0,0 +1,241 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes network messages for requesting and relaying groups of transactions together.\n+\n+==Motivation==\n+\n+# Propagate transactions that are incentive-compatible to mine, even if they don't meet minimum feerate alone.\n+\n+# Minimize storage of '''orphan''' transactions. A node considers a transaction to be an orphan if one or more inputs refers to an output the node does not know about.  Avoid requesting transactions by txid as opposed to wtxid (see BIP 339).\n+\n+==Specification==\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+Two main ideas are introduced:\n+\n+# Download and validate packages of transactions together.\n+\n+# Provide information to help peers decide whether to request and/or how validate transactions which are part of a package.\n+\n+===Intended Protocol Flow===\n+\n+Due to the asynchronous nature of a distributed transaction relay network, nodes may not receive all\n+of the information needed to validate a transaction at once. For example, after a node completes\n+Initial Block Download (IBD) and first starts participating in transaction relay with an empty\n+mempool, it is common to receive orphans. In such scenarios where a node is aware that it is missing\n+information, a '''receiver-initiated''' dialogue is appropriate:\n+\n+# Receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/receiver_init_dialogue.png|600px]]\n+\n+''Diagram: A receiver-initiated dialogue.''\n+\n+Sometimes, no matter what order transactions are received by a node, validating them individually is\n+insufficient. When the sender is aware of additional information that the receiver needs to accept a\n+package, a proactive '''sender-initiated''' dialogue should be enabled:\n+\n+# Sender announces they have package information pertaining to a transaction that might otherwise be undesired on its own.\n+\n+# The receiver requests package information.\n+\n+# The sender provides package information, including the wtxids of the transactions in the package and anything else that might be relevant (e.g. total fees and size).\n+\n+# The receiver uses the package information to decide how to request and validate the transactions.\n+\n+[[File:./bip-package-relay/sender_init_dialogue.png|600px]]\n+\n+''Diagram: A sender-initiated dialogue.''\n+\n+Package relay is negotiated between two peers during the version handshake. Package relay requires\n+both peers to support wtxid-based relay because package transactions are referenced by their wtxid.\n+\n+[[File:./bip-package-relay/sendpackages_negotiation.png|900px]]\n+\n+''Diagram: Package relay feature negotiation happens between version and verack.''\n+\n+===New Messages===\n+\n+Three new protocol messages are added for use in any version of package relay. Additionally, each\n+version of package relay must define its own inv type and \"pckginfo\" message version, referred to in\n+this document as \"MSG_PCKG\" and \"pckginfo\" respectively. See BIP-v1-packages for a concrete example.\n+\n+====sendpackages====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||  Purpose\n+|-\n+|version || uint32_t || 4 || Denotes a package version supported by the node.\n+|-\n+|max_count || uint32_t || 4 ||Specifies the maximum number of transactions per package this node is willing to accept.\n+|-\n+|max_weight || uint32_t || 4 ||Specifies the maximum total weight per package this node is willing to accept.\n+|-\n+|}\n+\n+# The \"sendpackages\" message has the structure defined above, with pchCommand == \"sendpackages\".\n+\n+# During version handshake, nodes should send a \"sendpackages\" message indicate they support package relay and may request packages.\n+\n+# The message should contain a version supported by the node. Nodes should send a \"sendpackages\" message for each version they support.\n+\n+# The \"sendpackages\" message MUST be sent before sending a \"verack\" message. If a \"sendpackages\" message is received afer \"verack\", the sender should be disconnected.\n+\n+# If 'fRelay==false' in a peer's version message, the node must not send \"sendpackages\" to them. If a \"sendpackages\" message is received by a peer after sending `fRelay==false` in their version message, the sender should be disconnected.\n+\n+# Upon receipt of a \"sendpackages\" message with a version that is not supported, a node must treat the peer as if it never received the message.\n+\n+# If both peers send \"wtxidrelay\" and \"sendpackages\" with the same version, the peers should announce, request, and send package information to each other.\n+\n+====getpckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions requested.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+# The \"getpckgtxns\" message has the structure defined above, with pchCommand == \"getpckgtxns\".\n+\n+# A \"getpckgtxns\" message should be used to request all or some of the transactions previously announced in a \"pckginfo\" message, specified by witness transactiosome id.\n+\n+# Upon receipt of a \"getpckgtxns\" message, a node must respond with either a \"pckgtxns\" containing the requested transactions or a \"notfound\" message indicating one or more of the transactions is unavailable. This allows the receiver to avoid downloading and storing transactions that cannot be validated immediately.\n+\n+# A \"getpckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"getpckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+====pckgtxns====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of transactions||variable|| The transactions in the package.\n+|}\n+\n+# The \"pckgtxns\" message has the structure defined above, with pchCommand == \"pckgtxns\".\n+\n+# A \"pckgtxns\" message should contain the transaction data requested using \"getpckgtxns\".\n+\n+# A \"pckgtxns\" message should only be sent to a peer that requested the package using \"getpckgtxns\". If a node receives an unsolicited package, the sender should be disconnected.\n+\n+# A \"pckgtxns\" message should only be sent if both peers agreed to send packages in the version handshake. If a \"pckgtxns\" message is received from a peer with which package relay was not negotiated, the sender should be disconnected.\n+\n+===Protocol Extensions===\n+\n+When introducing a new type of package, assign it a version number \"n\" and use an additional\n+\"sendpackages\" message during version handshake to negotiate support for it. An additional package\n+information message \"pckginfon\" and inv type \"MSG_PCKGn\" should be defined for the type of package.\n+However, \"getpckgtxns\" and \"pckgtxns\" do not need to be changed.\n+\n+==Compatibility==\n+\n+Older clients remain fully compatible and interoperable after this change. Clients implementing this\n+protocol will only attempt to send and request packages if agreed upon during the version handshake.\n+\n+==Rationale==\n+\n+===P2P Message Design===\n+\n+These p2p messages are added for communication efficiency and, as such, one should measure\n+alternative solutions based on the resources used to communicate (not necessarily trustworthy)\n+information: We would like to minimize network bandwidth, avoid downloading a transaction more than\n+once, avoid downloading transactions that are eventually rejected, and minimize storage allocated\n+for not-yet-validated transactions.\n+\n+Consider these scenarios specifically transaction relay:\n+\n+Alice (the \"sender\") is relaying transactions to Bob (the \"receiver\").\n+Alice's mempool has a minimum feerate of 1sat/vB and Bob's has a minimum feerate of 3sat/vB.\n+For simplicity, all transactions are 1600Wu in virtual size and 500 bytes in serialized size.\n+Apart from the spending relationships specified, all other inputs are from confirmed UTXOs.\n+\n+# Package {A, B} where A pays 0 satoshis and B pays 8000 satoshis in fees.\n+\n+# Package {C, D} where C pays 0 satoshis and D pays 1200 satoshis in fees.\n+\n+# Package {E, F, G, H, J} that pays 4000, 8000, 0, 2000, and 4000 satoshis in fees, respectively.\n+\n+[[File:./bip-package-relay/tx_scenarios.png|800px]]\n+\n+''Diagram: Transaction scenarios to consider when evaluating alternative designs. Note that the average transaction size is much larger than a SHA256 hash.''\n+\n+====Alternative Designs====\n+\n+'''Package Information Only:''' Just having \"pckginfo\" gives enough information for the receiver to\n+accept the package. Omit the \"getpckgtxns\" and \"pckgtxns\" messages. While this option is a good\n+fallback if batched transaction download fails for some reason, it shouldn't be used as the default\n+because it 'always' requires storage of unvalidated transactions.\n+\n+[[File:./bip-package-relay/package_info_only.png|1200px]]\n+\n+''Diagram: Alternative design where package relay only involves information.''\n+\n+'''No Package Information Round:''' Instead of having a package information round, just use the\n+child's wtxid to refer to the package and always send the entire package together. This would cause\n+nodes to redownload duplicate transactions.\n+\n+[[File:./bip-package-relay/no_package_info.png|900px]]\n+\n+''Diagram: Alternative design where nodes relay package transactions directly.''\n+\n+===Versioning System===\n+\n+Attempting to support arbitrary packages in mempool validation may result in very complex logic, new\n+Denial of Service attack vectors, and policy limitations that could be leveraged to censor\n+transactions (aka \"pinning attacks\"). However, the p2p protocol should be extensible to support\n+multiple types of packages based on future desired use cases. Two \"flavors\" of versioning were\n+considered:\n+\n+# When package mempool acceptance is upgraded to support more types of packages, increment the version number (similar to Erlay). During version handshake, peers negotiate which version of package relay they will use by each sending one \"sendpackages\" message.\n+\n+# When introducing another type of package, assign a version number to it and announce it as an additional supported version (similar to Compact Block Relay). During version handshake, peers send one \"sendpackages\" message for each version supported.\n+\n+The second option was favored because it allows different parameters for different versions.\n+For example, it should be possible to allow \"arbitrary topology but maximum 3-transaction\" package",
      "path": "bip-package-relay.mediawiki",
      "position": null,
      "original_position": 216,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "66b050af1a10540fd8fcc5d14c1980b9841b41a3",
      "in_reply_to_id": 877003626,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Text no longer there",
      "created_at": "2022-05-24T18:31:01Z",
      "updated_at": "2022-05-24T18:31:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r880831518",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/880831518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/892600671",
      "pull_request_review_id": 1000083480,
      "id": 892600671,
      "node_id": "PRRC_kwDOAN28mc41NAFf",
      "diff_hunk": "@@ -0,0 +1,346 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Update in eltoo[8][9]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Definitions==\n+\n+Given any two transactions Tx0 and Tx1 where Tx1 spends an output of Tx0, Tx0 is a '''parent''' of\n+Tx1 and Tx1 is a '''child''' of Tx0.\n+\n+A transaction's '''ancestors''' include, recursively, its parents, the parents of its parents, etc.\n+A transaction's '''descendants''' include, recursively, its children, the children of its children,\n+etc. A transaction's parent is its ancestor, but an ancestor is not necessarily a parent.\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PKG1)\".\n+\n+# The sender provides package information using \"pkginfo1\", including the blockhash of the sender's best block and the wtxids of the transactions in the package.\n+\n+# The receiver uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they should only request the missing ones.\n+\n+# Upon receiving a \"pkgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, so\n+the sender doesn't need to relay the package. However, individual parents that meet the fee filter\n+should still be announced.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the\n+\"sendpackages\" message with version=1. Nodes should only announce support for version 1 package\n+relay if their mempool policy supports acceptance of such packages. For example, if a mempool is\n+configured to reject transactions with more than 10 ancestors, not all version 1 packages will be\n+supported. See [rules](#Child-With-Unconfirmed-Parents-Packages) on version 1 packages.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PKG1\", and new protocol message, \"PKGINFO1\", are added.\n+\n+====pkginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pkginfo1\" message has the structure defined above, with pchCommand == \"pkginfo1\".\n+\n+# A \"pkginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pkginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc. If the 'blockhash' field does not match the node's current best chain tip, the message should be discarded.\n+\n+# Upon receipt of a malformed \"pkginfo1\" message or package that does not abide by the rules specified, the sender may be disconnected.\n+\n+# A node MUST NOT send a \"pkginfo1\" message that has not been requested by the recipient using \"getdata(MSG_PKG1)\". Upon receipt of an unsolicited \"pkginfo1\", a node may disconnect the sender.\n+\n+# A \"pkginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pkginfo1\" message is received from a peer with which package relay was not negotiated, the sender may be disconnected.\n+\n+====MSG_PKG1====\n+\n+# A new inv type (MSG_PKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Nodes may request package information using \"getdata(MSG_PKG1)\" even if it was not announced using \"inv(MSG_PKG1)\".\n+\n+# Nodes should not request package information from peers that have a different best chain tip, since they cannot verify that the package is child-with-unconfirmed-parents unless the 'blockhash' field matches their chain tip.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Unconfirmed Parents Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.",
      "path": "bip-v1-packages.mediawiki",
      "position": 174,
      "original_position": 174,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "2c53cddbc181ff15983a38c09e42f132ff9587a0",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The child's wtxid does not commit to the wtxids of its ancestors (just the txids), so I don't think it's correct to say that a package is uniquely identified by the child transaction's wtxid and the current chain tip.  (I tried to bring this point up in the mailing list thread as well, in the context of package de-duplication.)",
      "created_at": "2022-06-08T16:31:28Z",
      "updated_at": "2022-06-08T16:31:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r892600671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/892600671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/898852839",
      "pull_request_review_id": 1008714574,
      "id": 898852839,
      "node_id": "PRRC_kwDOAN28mc41k2fn",
      "diff_hunk": "@@ -0,0 +1,346 @@\n+<pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Child-With-Unconfirmed-Parents (v1) Packages\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+Extend package relay for packages consisting of one transaction and all of its unconfirmed parents.\n+Enable the use case in which a child pays for its otherwise-too-low-fee parents and their mempool\n+conflict(s).\n+\n+==Motivation==\n+\n+Since v0.13, Bitcoin Core has used ancestor packages instead of individual transactions to evaluate\n+the incentive compatibility of transactions in the mempool (PR #7594) and selecting them for\n+inclusion in blocks (PR #7600). Incentive-compatible mempool and miner policies help create a fair,\n+fee-based market for block space. While miners maximize transaction fees in order to earn higher\n+block rewards, non-mining users participating in transaction relay reap many benefits from employing\n+policies that result in a mempool with the same contents, including faster compact block relay and\n+more accurate fee estimation. Additionally, users may take advantage of mempool and miner policy to bump\n+the priority of their transactions by attaching high-fee descendants (Child Pays for Parent or CPFP).\n+\n+Only considering transactions one at a time for submission to the mempool creates a limitation in\n+the node's ability to determine which transactions have the highest feerates, since it cannot take\n+into account descendants until all the transactions are in the mempool. Similarly, it cannot use a\n+transaction's descendants when considering which of two conflicting transactions to keep (Replace by\n+Fee or RBF).\n+\n+When a user's transaction does not meet a mempool's minimum feerate and they cannot create a\n+replacement transaction directly, their transaction will simply be rejected by this mempool. They\n+also cannot attach a descendant to pay for replacing a conflicting transaction.\n+\n+This limitation harms users' ability to fee-bump their transactions. Further, it presents a security\n+issue in contracting protocols which rely on presigned, time-sensitive transactions to prevent\n+cheating (HTLC-Timeout in LN Penalty, Unvault Cancel in Revault [6], Refund Transaction in Discreet\n+Log Contracts [7], Update in eltoo[8][9]). In other words, a key security assumption of many\n+contracting protocols is that all parties can propagate and confirm transactions in a timely manner.\n+Increasing attention has been brought to \"pinning attacks,\" a type of censorship in which the\n+attacker uses mempool policy restrictions to prevent a transaction from being relayed or getting\n+mined. [0][1][2][3]\n+\n+These transactions must meet a certain confirmation target to be effective, but their feerates\n+are negotiated well ahead of broadcast time. If the forecasted feerate was too low and no\n+fee-bumping options are available, attackers can steal money from their counterparties.  Always\n+overestimating fees may sidestep this issue temporarily (while mempool traffic is low and\n+predictable), but this solution is not foolproof and wastes users' money. For some attacks,\n+the available defenses require nodes to have a bird's-eye view of Bitcoin nodes' mempools,\n+which is an unreasonable security requirement.\n+\n+The best solution is to enable nodes to consider packages of transactions as a unit, e.g. one or\n+more low-fee parent transactions with a high-fee child, instead of separately. A package-aware\n+mempool policy can help determine if it would actually be economically rational to accept a\n+transaction to the mempool if it doesn't meet fee requirements individually. Network-wide adoption\n+of these policies would create a more purely-feerate-based market for block space and allow\n+contracting protocols to adjust fees (and therefore mining priority) at broadcast time.\n+\n+Theoretically, developing a safe and incentive-compatible package mempool acceptance policy is\n+sufficient to solve this issue. Nodes could opportunistically accept packages (e.g. by trying\n+combinations of transactions rejected from their mempools), but this practice would likely be\n+inefficient at best and open new Denial of Service attacks at worst.  As such, this proposal\n+suggests adding new p2p messages enabling nodes to request and share package validation-related\n+information with one another, resulting in a more efficient and reliable way to propagate packages.\n+\n+==Definitions==\n+\n+Given any two transactions Tx0 and Tx1 where Tx1 spends an output of Tx0, Tx0 is a '''parent''' of\n+Tx1 and Tx1 is a '''child''' of Tx0.\n+\n+A transaction's '''ancestors''' include, recursively, its parents, the parents of its parents, etc.\n+A transaction's '''descendants''' include, recursively, its children, the children of its children,\n+etc. A transaction's parent is its ancestor, but an ancestor is not necessarily a parent.\n+\n+A '''package''' is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+==Specification==\n+\n+===Intended Protocol Flow===\n+\n+When relaying a package of low-fee parent(s) and high-fee child, the sender and receiver do the\n+following:\n+\n+# Sender announces they have a child-with-unconfirmed-parents package for a child that pays for otherwise-too-low-fee parent(s) using \"inv(MSG_PKG1)\".\n+\n+# The receiver requests package information using \"getdata(MSG_PKG1)\".\n+\n+# The sender provides package information using \"pkginfo1\", including the blockhash of the sender's best block and the wtxids of the transactions in the package.\n+\n+# The receiver uses the package information to decide how to request the transactions. For example, if the receiver already has some of the transactions in their mempool, they should only request the missing ones.\n+\n+# Upon receiving a \"pkgtxns\", the receiver submits the transactions together as a package.\n+\n+[[File:./bip-v1-packages/normal_child_parents.png|600px]]\n+\n+''Diagram: The intended protocol flow for a sender relaying zero-fee parents with a high-fee child.''\n+\n+[[File:./bip-v1-packages/too_low.png|600px]]\n+\n+''Diagram: A scenario in which a high-fee child is insufficient to pay for its low-fee parents, so\n+the sender doesn't need to relay the package. However, individual parents that meet the fee filter\n+should still be announced.''\n+\n+[[File:./bip-v1-packages/cpfp_dedup.png|600px]]\n+\n+''Diagram: A scenario in which one of the package transactions has already been accepted and is not requested a second time.''\n+\n+Child-with-unconfirmed-parents package relay is negotiated between two peers through the\n+\"sendpackages\" message with version=1. Nodes should only announce support for version 1 package\n+relay if their mempool policy supports acceptance of such packages. For example, if a mempool is\n+configured to reject transactions with more than 10 ancestors, not all version 1 packages will be\n+supported. See [rules](#Child-With-Unconfirmed-Parents-Packages) on version 1 packages.\n+\n+[[File:./bip-v1-packages/sendpackages_negotiation.png|600px]]\n+\n+''Diagram: Version 1 package relay is negotiated during the version handshake.''\n+\n+===New Messages===\n+\n+A new inv type, \"MSG_PKG1\", and new protocol message, \"PKGINFO1\", are added.\n+\n+====pkginfo1====\n+\n+{|\n+|  Field Name  ||  Type  ||  Size  ||   Purpose\n+|-\n+|blockhash || uint256 || 32 || The chain tip at which this package is defined.\n+|-\n+|txns_length||CompactSize||1 or 3 bytes|| The number of transactions provided.\n+|-\n+|txns||List of wtxids||txns_length * 32|| The wtxids of each transaction in the package.\n+|}\n+\n+\n+# The \"pkginfo1\" message has the structure defined above, with pchCommand == \"pkginfo1\".\n+\n+# A \"pkginfo1\" message contains information about a version 1 package (defined below), referenced by the wtxid of the transaction it pertains to and the current blockhash.\n+\n+# Upon receipt of a \"pkginfo1\" message, the node should decide if it wants to validate the package, request transaction data if necessary, etc. If the 'blockhash' field does not match the node's current best chain tip, the message should be discarded.\n+\n+# Upon receipt of a malformed \"pkginfo1\" message or package that does not abide by the rules specified, the sender may be disconnected.\n+\n+# A node MUST NOT send a \"pkginfo1\" message that has not been requested by the recipient using \"getdata(MSG_PKG1)\". Upon receipt of an unsolicited \"pkginfo1\", a node may disconnect the sender.\n+\n+# A \"pkginfo1\" message should only be sent if both peers agreed to send version 1 packages in the version handshake. If a \"pkginfo1\" message is received from a peer with which package relay was not negotiated, the sender may be disconnected.\n+\n+====MSG_PKG1====\n+\n+# A new inv type (MSG_PKG1 == 0x6) is added, for use in inv messages and getdata requests pertaining to version 1 packages.\n+\n+# As an inv type, it indicates that both transaction data and version 1 package information are available for the transaction. The transaction is referenced by its wtxid. As a getdata request type, it indicates that the sender wants package information for the transaction.\n+\n+# Nodes may request package information using \"getdata(MSG_PKG1)\" even if it was not announced using \"inv(MSG_PKG1)\".\n+\n+# Nodes should not request package information from peers that have a different best chain tip, since they cannot verify that the package is child-with-unconfirmed-parents unless the 'blockhash' field matches their chain tip.\n+\n+# Upon receipt of a \"getdata\" request for \"MSG_PKG1\", the node should respond with the version 1 package corresponding to the requested transaction and its current chain tip, or with NOTFOUND. The node should not assume that the sender is requesting the transaction data as well.\n+\n+===Child With Unconfirmed Parents Packages===\n+\n+Version 1 package relay supports child-with-unconfirmed-parents packages. All v1 packages\n+sent between nodes MUST abide by the rules below, otherwise the package is malformed and the sender\n+should be disconnected.\n+\n+A version 1 or '''child-with-unconfirmed-parents''' package can be defined for any transaction that spends\n+unconfirmed inputs. The child can be thought of as the \"representative\" of the package. This package\n+can be uniquely identified by the transaction's wtxid and the current chain tip block hash.",
      "path": "bip-v1-packages.mediawiki",
      "position": 174,
      "original_position": 174,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "2c53cddbc181ff15983a38c09e42f132ff9587a0",
      "in_reply_to_id": 892600671,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes sorry, I think I should have said the package can be *easily reconstructed* using the transaction's wtxid and current chain tip block hash.",
      "created_at": "2022-06-16T08:50:18Z",
      "updated_at": "2022-06-16T08:50:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r898852839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/898852839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/929322273",
      "pull_request_review_id": 1050098201,
      "id": 929322273,
      "node_id": "PRRC_kwDOAN28mc43ZFUh",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD",
      "path": "bip-package-relay.mediawiki",
      "position": 11,
      "original_position": 11,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Before taking this out of draft, please license it under one of the [acceptable licenses](https://github.com/bitcoin/bips/blob/master/bip-0002.mediawiki#Recommended_licenses)",
      "created_at": "2022-07-25T21:33:23Z",
      "updated_at": "2022-07-25T21:33:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r929322273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/929322273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/929919278",
      "pull_request_review_id": 1050918076,
      "id": 929919278,
      "node_id": "PRRC_kwDOAN28mc43bXEu",
      "diff_hunk": "@@ -0,0 +1,228 @@\n+pre>\n+  BIP: ?\n+  Layer: Peer Services\n+  Title: Generic Package Relay\n+  Author: Gloria Zhao <gloriajzhao@gmail.com>\n+  Comments-Summary:\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2022-04-14\n+  License: PD",
      "path": "bip-package-relay.mediawiki",
      "position": 11,
      "original_position": 11,
      "commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "original_commit_id": "9a85feff61297483ee50ccd9a4af07545742dc23",
      "in_reply_to_id": 929322273,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks will do! I'm still working on a few changes based on feedback, and then will take this out of draft.",
      "created_at": "2022-07-26T12:45:29Z",
      "updated_at": "2022-07-26T12:45:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1324#discussion_r929919278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/929919278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1324"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 11,
      "original_line": 11,
      "side": "RIGHT"
    }
  ]
}